diff --git a/vimbisopay_app/lib/application/usecases/get_account_by_handle.dart b/vimbisopay_app/lib/application/usecases/get_account_by_handle.dart
index c223ad3..cece7e7 100644
--- a/vimbisopay_app/lib/application/usecases/get_account_by_handle.dart
+++ b/vimbisopay_app/lib/application/usecases/get_account_by_handle.dart
@@ -13,12 +13,12 @@ class GetAccountByHandle {
   /// Returns Either a Failure or the Account
   Future<Either<Failure, Account>> execute(String handle) async {
     if (handle.isEmpty) {
-      return const Left(DomainFailure('Account handle cannot be empty'));
+      return Left(DomainFailure('Account handle cannot be empty'));
     }
     
     // Handle validation could be moved to a value object
     if (!RegExp(r'^[a-z0-9_]{3,30}$').hasMatch(handle)) {
-      return const Left(DomainFailure('Invalid account handle format'));
+      return Left(DomainFailure('Invalid account handle format'));
     }
 
     return repository.getAccountByHandle(handle);
diff --git a/vimbisopay_app/lib/application/usecases/get_ledger.dart b/vimbisopay_app/lib/application/usecases/get_ledger.dart
index 15e4d8d..ec3742d 100644
--- a/vimbisopay_app/lib/application/usecases/get_ledger.dart
+++ b/vimbisopay_app/lib/application/usecases/get_ledger.dart
@@ -4,15 +4,10 @@ import 'package:vimbisopay_app/domain/repositories/account_repository.dart';
 
 /// Parameters for getting ledger entries
 class GetLedgerParams {
-  final String accountId;
   final int? startRow;
   final int? numRows;
 
-  GetLedgerParams({
-    required this.accountId,
-    this.startRow,
-    this.numRows,
-  });
+  GetLedgerParams({this.startRow, this.numRows});
 }
 
 /// Use case for retrieving account ledger/transaction history
@@ -22,15 +17,11 @@ class GetLedger {
   GetLedger(this.repository);
 
   /// Execute the use case
-  /// Returns Either a Failure or Map containing ledger data
-  Future<Either<Failure, Map<String, dynamic>>> execute([GetLedgerParams? params]) {
-    if (params == null) {
-      throw ArgumentError('GetLedgerParams is required');
-    }
+  /// Returns Either a Failure or List of ledger entries
+  Future<Either<Failure, List<dynamic>>> execute([GetLedgerParams? params]) {
     return repository.getLedger(
-      accountId: params.accountId,
-      startRow: params.startRow,
-      numRows: params.numRows,
+      startRow: params?.startRow,
+      numRows: params?.numRows,
     );
   }
 }
diff --git a/vimbisopay_app/lib/application/usecases/get_member_dashboard.dart b/vimbisopay_app/lib/application/usecases/get_member_dashboard.dart
index 37be02d..895b73c 100644
--- a/vimbisopay_app/lib/application/usecases/get_member_dashboard.dart
+++ b/vimbisopay_app/lib/application/usecases/get_member_dashboard.dart
@@ -13,12 +13,12 @@ class GetMemberDashboard {
   /// Returns Either a Failure or the Dashboard
   Future<Either<Failure, Dashboard>> execute(String phone) async {
     if (phone.isEmpty) {
-      return const Left(DomainFailure('Phone number cannot be empty'));
+      return Left(DomainFailure('Phone number cannot be empty'));
     }
     
     // Basic phone number validation
     if (!RegExp(r'^\+?[\d\s-]+$').hasMatch(phone)) {
-      return const Left(DomainFailure('Invalid phone number format'));
+      return Left(DomainFailure('Invalid phone number format'));
     }
 
     return repository.getMemberDashboardByPhone(phone);
diff --git a/vimbisopay_app/lib/core/utils/ui_utils.dart b/vimbisopay_app/lib/core/utils/ui_utils.dart
deleted file mode 100644
index d89ebb6..0000000
--- a/vimbisopay_app/lib/core/utils/ui_utils.dart
+++ /dev/null
@@ -1,55 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:vimbisopay_app/presentation/constants/home_constants.dart';
-
-class UIUtils {
-  static Size getScreenDimensions(BuildContext context) {
-    final screenHeight = MediaQuery.of(context).size.height;
-    final safePadding = MediaQuery.of(context).padding;
-    final availableHeight = screenHeight - 
-        HomeConstants.appBarHeight - 
-        safePadding.top - 
-        safePadding.bottom;
-    
-    return Size(
-      MediaQuery.of(context).size.width,
-      availableHeight,
-    );
-  }
-
-  static double getViewPagerHeight(BuildContext context) {
-    return getScreenDimensions(context).height * HomeConstants.accountCardHeight;
-  }
-
-  static String getInitials(String firstname, String lastname) {
-    return '${firstname.isNotEmpty ? firstname[0] : ''}${lastname.isNotEmpty ? lastname[0] : ''}'
-        .toUpperCase();
-  }
-
-  static BoxDecoration get gradientBackground => BoxDecoration(
-    gradient: LinearGradient(
-      begin: Alignment.topCenter,
-      end: Alignment.bottomCenter,
-      colors: [
-        Colors.black.withOpacity(0.1),
-        Colors.black,
-      ],
-    ),
-  );
-}
-
-class GradientBackground extends StatelessWidget {
-  final Widget child;
-
-  const GradientBackground({
-    super.key,
-    required this.child,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      decoration: UIUtils.gradientBackground,
-      child: child,
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/domain/entities/dashboard.dart b/vimbisopay_app/lib/domain/entities/dashboard.dart
index 1b9231c..5aa91ed 100644
--- a/vimbisopay_app/lib/domain/entities/dashboard.dart
+++ b/vimbisopay_app/lib/domain/entities/dashboard.dart
@@ -1,52 +1,13 @@
 import 'package:vimbisopay_app/domain/entities/base_entity.dart';
 
-enum MemberTierType {
-  open(0, 10.0, false, true, false, false, false, false),    // Free tier
-  hustler(1, 100.0, false, true, false, false, false, true); // $1 tier
-
-  final int value;
-  final double dailyLimit;
-  final bool canIssueUnsecuredCredex;
-  final bool canIssueSecuredCredex;
-  final bool canCreateAdditionalAccounts;
-  final bool canBeAddedToAccount;
-  final bool canAddOthersToAccount;
-  final bool canRequestRecurringPayments;
-
-  const MemberTierType(
-    this.value,
-    this.dailyLimit,
-    this.canIssueUnsecuredCredex,
-    this.canIssueSecuredCredex,
-    this.canCreateAdditionalAccounts,
-    this.canBeAddedToAccount,
-    this.canAddOthersToAccount,
-    this.canRequestRecurringPayments,
-  );
-}
-
 class MemberTier {
   final int low;
   final int high;
-  late final MemberTierType type;
 
-  MemberTier({
+  const MemberTier({
     required this.low,
     required this.high,
-  }) {
-    type = MemberTierType.values.firstWhere(
-      (type) => type.value == high,
-      orElse: () => MemberTierType.open,
-    );
-  }
-
-  bool get canIssueSecuredCredex => type.canIssueSecuredCredex;
-  double get dailySecuredCredexLimit => type.dailyLimit;
-  bool get canIssueUnsecuredCredex => type.canIssueUnsecuredCredex;
-  bool get canCreateAdditionalAccounts => type.canCreateAdditionalAccounts;
-  bool get canBeAddedToAccount => type.canBeAddedToAccount;
-  bool get canAddOthersToAccount => type.canAddOthersToAccount;
-  bool get canRequestRecurringPayments => type.canRequestRecurringPayments;
+  });
 }
 
 class UnsecuredBalances {
@@ -125,14 +86,6 @@ class Dashboard extends Entity {
     required this.accounts,
   }) : super(id);
 
-  bool get canIssueSecuredCredex => memberTier.canIssueSecuredCredex;
-  double get dailySecuredCredexLimit => memberTier.dailySecuredCredexLimit;
-  bool get canIssueUnsecuredCredex => memberTier.canIssueUnsecuredCredex;
-  bool get canCreateAdditionalAccounts => memberTier.canCreateAdditionalAccounts;
-  bool get canBeAddedToAccount => memberTier.canBeAddedToAccount;
-  bool get canAddOthersToAccount => memberTier.canAddOthersToAccount;
-  bool get canRequestRecurringPayments => memberTier.canRequestRecurringPayments;
-
   @override
   bool operator ==(Object other) {
     if (identical(this, other)) return true;
diff --git a/vimbisopay_app/lib/domain/entities/ledger_entry.dart b/vimbisopay_app/lib/domain/entities/ledger_entry.dart
deleted file mode 100644
index adc20e1..0000000
--- a/vimbisopay_app/lib/domain/entities/ledger_entry.dart
+++ /dev/null
@@ -1,48 +0,0 @@
-class LedgerEntry {
-  final String credexID;
-  final DateTime timestamp;
-  final String type;
-  final double amount;
-  final String denomination;
-  final String description;
-  final String counterpartyAccountName;
-  final String formattedAmount;
-  final String accountId; // Added to track which account the entry belongs to
-  final String accountName; // Added to display account information
-
-  LedgerEntry({
-    required this.credexID,
-    required this.timestamp,
-    required this.type,
-    required this.amount,
-    required this.denomination,
-    required this.description,
-    required this.counterpartyAccountName,
-    required this.formattedAmount,
-    required this.accountId,
-    required this.accountName,
-  });
-
-  factory LedgerEntry.fromJson(Map<String, dynamic> json, {required String accountId, required String accountName}) {
-    final timestamp = json['timestamp'];
-    return LedgerEntry(
-      credexID: json['credexID'],
-      timestamp: DateTime(
-        timestamp['year']['low'],
-        timestamp['month']['low'],
-        timestamp['day']['low'],
-        timestamp['hour']['low'],
-        timestamp['minute']['low'],
-        timestamp['second']['low'],
-      ),
-      type: json['type'],
-      amount: double.parse(json['amount']),
-      denomination: json['denomination'],
-      description: json['description'],
-      counterpartyAccountName: json['counterpartyAccountName'],
-      formattedAmount: json['formattedAmount'],
-      accountId: accountId,
-      accountName: accountName,
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/domain/entities/user.dart b/vimbisopay_app/lib/domain/entities/user.dart
index 96b1fde..5cb6ab4 100644
--- a/vimbisopay_app/lib/domain/entities/user.dart
+++ b/vimbisopay_app/lib/domain/entities/user.dart
@@ -2,13 +2,11 @@ class User {
   final String memberId;
   final String phone;
   final String token;
-  final String tier;
 
   const User({
     required this.memberId,
     required this.phone,
     required this.token,
-    this.tier = 'free', // Default to free tier
   });
 
   Map<String, dynamic> toMap() {
@@ -16,7 +14,6 @@ class User {
       'memberId': memberId,
       'phone': phone,
       'token': token,
-      'tier': tier,
     };
   }
 
@@ -25,7 +22,6 @@ class User {
       memberId: map['memberId'] as String,
       phone: map['phone'] as String,
       token: map['token'] as String,
-      tier: (map['tier'] as String?) ?? 'free', // Default to free if not present
     );
   }
 
@@ -35,10 +31,9 @@ class User {
     return other is User &&
         other.memberId == memberId &&
         other.phone == phone &&
-        other.token == token &&
-        other.tier == tier;
+        other.token == token;
   }
 
   @override
-  int get hashCode => Object.hash(memberId, phone, token, tier);
+  int get hashCode => Object.hash(memberId, phone, token);
 }
diff --git a/vimbisopay_app/lib/domain/repositories/account_repository.dart b/vimbisopay_app/lib/domain/repositories/account_repository.dart
index 0f51f4f..82bd5e5 100644
--- a/vimbisopay_app/lib/domain/repositories/account_repository.dart
+++ b/vimbisopay_app/lib/domain/repositories/account_repository.dart
@@ -23,11 +23,7 @@ abstract class AccountRepository {
   
   Future<Either<Failure, Map<String, double>>> getBalances();
   
-  Future<Either<Failure, Map<String, dynamic>>> getLedger({
-    required String accountId,
-    int? startRow,
-    int? numRows,
-  });
+  Future<Either<Failure, List>> getLedger({int? startRow, int? numRows});
 
   Future<Either<Failure, Account>> getAccountByHandle(String handle);
 
diff --git a/vimbisopay_app/lib/infrastructure/database/database_helper.dart b/vimbisopay_app/lib/infrastructure/database/database_helper.dart
index fb46570..fcef242 100644
--- a/vimbisopay_app/lib/infrastructure/database/database_helper.dart
+++ b/vimbisopay_app/lib/infrastructure/database/database_helper.dart
@@ -22,7 +22,7 @@ class DatabaseHelper {
     final String path = join(await getDatabasesPath(), 'vimbisopay.db');
     return await openDatabase(
       path,
-      version: 3, // Increment version to trigger upgrade
+      version: 2,
       onCreate: _onCreate,
       onUpgrade: _onUpgrade,
     );
@@ -33,10 +33,8 @@ class DatabaseHelper {
   }
 
   Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
-    if (oldVersion < 3) {
-      // Handle upgrade to version 3 (adding tier column)
-      await db.execute('ALTER TABLE users ADD COLUMN tier TEXT NOT NULL DEFAULT "free"');
-    }
+    await db.execute('DROP TABLE IF EXISTS users');
+    await _createTables(db);
   }
 
   Future<void> _createTables(Database db) async {
@@ -44,8 +42,7 @@ class DatabaseHelper {
       CREATE TABLE users(
         memberId TEXT PRIMARY KEY,
         phone TEXT NOT NULL,
-        token TEXT NOT NULL,
-        tier TEXT NOT NULL DEFAULT "free"
+        token TEXT NOT NULL
       )
     ''');
   }
@@ -60,7 +57,11 @@ class DatabaseHelper {
       // Save the new user
       await db.insert(
         'users',
-        user.toMap(),
+        {
+          'memberId': user.memberId,
+          'phone': user.phone,
+          'token': user.token,
+        },
         conflictAlgorithm: ConflictAlgorithm.replace,
       );
     } catch (e) {
@@ -75,7 +76,11 @@ class DatabaseHelper {
 
       if (maps.isEmpty) return null;
 
-      return User.fromMap(maps.first);
+      return User(
+        memberId: maps.first['memberId'] as String,
+        phone: maps.first['phone'] as String,
+        token: maps.first['token'] as String,
+      );
     } catch (e) {
       throw Exception('Failed to get user: $e');
     }
diff --git a/vimbisopay_app/lib/infrastructure/repositories/account_repository_impl.dart b/vimbisopay_app/lib/infrastructure/repositories/account_repository_impl.dart
index fd0c138..ce264b6 100644
--- a/vimbisopay_app/lib/infrastructure/repositories/account_repository_impl.dart
+++ b/vimbisopay_app/lib/infrastructure/repositories/account_repository_impl.dart
@@ -34,7 +34,7 @@ class AccountRepositoryImpl implements AccountRepository {
     try {
       final user = await _databaseHelper.getUser();
       if (user == null) {
-        return const Left(InfrastructureFailure('Not authenticated'));
+        return Left(InfrastructureFailure('Not authenticated'));
       }
 
       final result = await request(user.token);
@@ -147,36 +147,27 @@ class AccountRepositoryImpl implements AccountRepository {
   }
 
   @override
-  Future<Either<Failure, Map<String, dynamic>>> getLedger({
-    required String accountId,
-    int? startRow,
-    int? numRows,
-  }) async {
+  Future<Either<Failure, List>> getLedger({int? startRow, int? numRows}) async {
     return _executeAuthenticatedRequest(
       request: (token) async {
-        final url = '$baseUrl/getLedger';
-        final headers = _authHeaders(token);
-        final body = {
-          'accountID': accountId,
-          if (startRow != null) 'startRow': startRow,
-          if (numRows != null) 'numRows': numRows,
+        final queryParams = {
+          if (startRow != null) 'startRow': startRow.toString(),
+          if (numRows != null) 'numRows': numRows.toString(),
         };
 
+        final url = Uri.parse('$baseUrl/ledger').replace(queryParameters: queryParams).toString();
+        final headers = _authHeaders(token);
+
         final response = await _loggedRequest(
-          () => http.post(
-            Uri.parse(url),
-            headers: headers,
-            body: json.encode(body),
-          ),
+          () => http.get(Uri.parse(url), headers: headers),
           url,
-          'POST',
+          'GET',
           headers: headers,
-          body: body,
         );
 
         if (response.statusCode == 200) {
           final data = json.decode(response.body);
-          return Right(data as Map<String, dynamic>);
+          return Right(data['entries'] as List);
         } else {
           final errorMessage = json.decode(response.body)['message'] ?? 'Failed to get ledger';
           return Left(InfrastructureFailure(errorMessage));
@@ -242,7 +233,7 @@ class AccountRepositoryImpl implements AccountRepository {
           if (!data.containsKey('data') || 
               !data['data'].containsKey('action') ||
               !data['data'].containsKey('dashboard')) {
-            return const Left(InfrastructureFailure('Invalid response format'));
+            return Left(InfrastructureFailure('Invalid response format'));
           }
 
           final actionDetails = data['data']['action']['details'];
@@ -374,7 +365,7 @@ class AccountRepositoryImpl implements AccountRepository {
         if (!jsonResponse.containsKey('data') || 
             !jsonResponse['data'].containsKey('action') ||
             !jsonResponse['data']['action'].containsKey('details')) {
-          return const Left(InfrastructureFailure('Invalid response format'));
+          return Left(InfrastructureFailure('Invalid response format'));
         }
 
         final actionDetails = jsonResponse['data']['action']['details'];
diff --git a/vimbisopay_app/lib/main.dart b/vimbisopay_app/lib/main.dart
index 434b902..6d416d5 100644
--- a/vimbisopay_app/lib/main.dart
+++ b/vimbisopay_app/lib/main.dart
@@ -28,10 +28,12 @@ class MyApp extends StatelessWidget {
           primary: AppColors.primary,
           secondary: AppColors.secondary,
           surface: AppColors.surface,
+          background: AppColors.background,
           error: AppColors.error,
           onPrimary: AppColors.textPrimary,
           onSecondary: AppColors.textPrimary,
           onSurface: AppColors.textPrimary,
+          onBackground: AppColors.textPrimary,
           onError: AppColors.textPrimary,
         ),
         scaffoldBackgroundColor: AppColors.background,
@@ -174,7 +176,7 @@ class LoginSignupScreen extends StatelessWidget {
                     ),
                   ),
                 ),
-                const Text(
+                Text(
                   'Welcome to VimbisoPay',
                   style: TextStyle(
                     fontSize: 28,
diff --git a/vimbisopay_app/lib/presentation/blocs/home/home_bloc.dart b/vimbisopay_app/lib/presentation/blocs/home/home_bloc.dart
deleted file mode 100644
index d102db3..0000000
--- a/vimbisopay_app/lib/presentation/blocs/home/home_bloc.dart
+++ /dev/null
@@ -1,89 +0,0 @@
-import 'package:flutter_bloc/flutter_bloc.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_event.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_state.dart';
-
-class HomeBloc extends Bloc<HomeEvent, HomeState> {
-  HomeBloc() : super(const HomeState()) {
-    on<HomePageChanged>(_onPageChanged);
-    on<HomeDataLoaded>(_onDataLoaded);
-    on<HomeLedgerLoaded>(_onLedgerLoaded);
-    on<HomeErrorOccurred>(_onErrorOccurred);
-    on<HomeLoadStarted>(_onLoadStarted);
-    on<HomeRefreshStarted>(_onRefreshStarted);
-    on<HomeLoadMoreStarted>(_onLoadMoreStarted);
-  }
-
-  void _onPageChanged(
-    HomePageChanged event,
-    Emitter<HomeState> emit,
-  ) {
-    emit(state.copyWith(currentPage: event.page));
-  }
-
-  void _onLoadStarted(
-    HomeLoadStarted event,
-    Emitter<HomeState> emit,
-  ) {
-    emit(state.copyWith(
-      status: HomeStatus.loading,
-      error: null,
-    ));
-  }
-
-  void _onRefreshStarted(
-    HomeRefreshStarted event,
-    Emitter<HomeState> emit,
-  ) {
-    emit(state.copyWith(
-      status: HomeStatus.refreshing,
-      error: null,
-    ));
-  }
-
-  void _onLoadMoreStarted(
-    HomeLoadMoreStarted event,
-    Emitter<HomeState> emit,
-  ) {
-    if (!state.hasMoreEntries) return;
-    
-    emit(state.copyWith(
-      status: HomeStatus.loadingMore,
-      error: null,
-    ));
-  }
-
-  void _onDataLoaded(
-    HomeDataLoaded event,
-    Emitter<HomeState> emit,
-  ) {
-    emit(state.copyWith(
-      status: HomeStatus.success,
-      dashboard: event.dashboard,
-      user: event.user,
-      error: null,
-    ));
-  }
-
-  void _onLedgerLoaded(
-    HomeLedgerLoaded event,
-    Emitter<HomeState> emit,
-  ) {
-    emit(state.copyWith(
-      status: HomeStatus.success,
-      accountLedgers: event.accountLedgers,
-      combinedLedgerEntries: event.combinedEntries,
-      hasMoreEntries: event.hasMore,
-      error: null,
-    ));
-  }
-
-  void _onErrorOccurred(
-    HomeErrorOccurred event,
-    Emitter<HomeState> emit,
-  ) {
-    emit(state.copyWith(
-      status: HomeStatus.error,
-      error: event.message,
-    ));
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/blocs/home/home_event.dart b/vimbisopay_app/lib/presentation/blocs/home/home_event.dart
deleted file mode 100644
index 46973ac..0000000
--- a/vimbisopay_app/lib/presentation/blocs/home/home_event.dart
+++ /dev/null
@@ -1,69 +0,0 @@
-import 'package:equatable/equatable.dart';
-import 'package:vimbisopay_app/domain/entities/dashboard.dart';
-import 'package:vimbisopay_app/domain/entities/ledger_entry.dart';
-import 'package:vimbisopay_app/domain/entities/user.dart';
-
-abstract class HomeEvent extends Equatable {
-  const HomeEvent();
-
-  @override
-  List<Object?> get props => [];
-}
-
-class HomePageChanged extends HomeEvent {
-  final int page;
-
-  const HomePageChanged(this.page);
-
-  @override
-  List<Object> get props => [page];
-}
-
-class HomeLoadStarted extends HomeEvent {
-  const HomeLoadStarted();
-}
-
-class HomeRefreshStarted extends HomeEvent {
-  const HomeRefreshStarted();
-}
-
-class HomeLoadMoreStarted extends HomeEvent {
-  const HomeLoadMoreStarted();
-}
-
-class HomeDataLoaded extends HomeEvent {
-  final Dashboard dashboard;
-  final User user;
-
-  const HomeDataLoaded({
-    required this.dashboard,
-    required this.user,
-  });
-
-  @override
-  List<Object> get props => [dashboard, user];
-}
-
-class HomeLedgerLoaded extends HomeEvent {
-  final Map<String, List<LedgerEntry>> accountLedgers;
-  final List<LedgerEntry> combinedEntries;
-  final bool hasMore;
-
-  const HomeLedgerLoaded({
-    required this.accountLedgers,
-    required this.combinedEntries,
-    required this.hasMore,
-  });
-
-  @override
-  List<Object> get props => [accountLedgers, combinedEntries, hasMore];
-}
-
-class HomeErrorOccurred extends HomeEvent {
-  final String? message;
-
-  const HomeErrorOccurred([this.message]);
-
-  @override
-  List<Object?> get props => [message];
-}
diff --git a/vimbisopay_app/lib/presentation/blocs/home/home_state.dart b/vimbisopay_app/lib/presentation/blocs/home/home_state.dart
deleted file mode 100644
index fb39669..0000000
--- a/vimbisopay_app/lib/presentation/blocs/home/home_state.dart
+++ /dev/null
@@ -1,74 +0,0 @@
-import 'package:equatable/equatable.dart';
-import 'package:vimbisopay_app/domain/entities/dashboard.dart';
-import 'package:vimbisopay_app/domain/entities/ledger_entry.dart';
-import 'package:vimbisopay_app/domain/entities/user.dart';
-
-enum HomeStatus {
-  initial,
-  loading,
-  loadingMore,
-  refreshing,
-  success,
-  error,
-}
-
-class HomeState extends Equatable {
-  final HomeStatus status;
-  final Dashboard? dashboard;
-  final User? user;
-  final Map<String, List<LedgerEntry>> accountLedgers;
-  final List<LedgerEntry> combinedLedgerEntries;
-  final bool hasMoreEntries;
-  final String? error;
-  final int currentPage;
-
-  const HomeState({
-    this.status = HomeStatus.initial,
-    this.dashboard,
-    this.user,
-    this.accountLedgers = const {},
-    this.combinedLedgerEntries = const [],
-    this.hasMoreEntries = true,
-    this.error,
-    this.currentPage = 0,
-  });
-
-  bool get isInitialLoading => status == HomeStatus.loading && combinedLedgerEntries.isEmpty;
-  bool get isRefreshing => status == HomeStatus.refreshing;
-  bool get isLoadingMore => status == HomeStatus.loadingMore;
-  bool get hasError => error != null;
-
-  HomeState copyWith({
-    HomeStatus? status,
-    Dashboard? dashboard,
-    User? user,
-    Map<String, List<LedgerEntry>>? accountLedgers,
-    List<LedgerEntry>? combinedLedgerEntries,
-    bool? hasMoreEntries,
-    String? error,
-    int? currentPage,
-  }) {
-    return HomeState(
-      status: status ?? this.status,
-      dashboard: dashboard ?? this.dashboard,
-      user: user ?? this.user,
-      accountLedgers: accountLedgers ?? this.accountLedgers,
-      combinedLedgerEntries: combinedLedgerEntries ?? this.combinedLedgerEntries,
-      hasMoreEntries: hasMoreEntries ?? this.hasMoreEntries,
-      error: error,  // Intentionally not using ?? to allow setting to null
-      currentPage: currentPage ?? this.currentPage,
-    );
-  }
-
-  @override
-  List<Object?> get props => [
-        status,
-        dashboard,
-        user,
-        accountLedgers,
-        combinedLedgerEntries,
-        hasMoreEntries,
-        error,
-        currentPage,
-      ];
-}
diff --git a/vimbisopay_app/lib/presentation/constants/home_constants.dart b/vimbisopay_app/lib/presentation/constants/home_constants.dart
deleted file mode 100644
index 09926b0..0000000
--- a/vimbisopay_app/lib/presentation/constants/home_constants.dart
+++ /dev/null
@@ -1,25 +0,0 @@
-class HomeConstants {
-  static const int ledgerPageSize = 20;
-  static const double accountCardHeight = 0.45;
-  static const double appBarHeight = 72.0;
-  
-  // Button dimensions
-  static const double actionButtonSize = 50.0;
-  static const double actionButtonIconSize = 24.0;
-  static const double actionButtonTextSize = 10.0;
-  
-  // Padding and spacing
-  static const double defaultPadding = 16.0;
-  static const double smallPadding = 8.0;
-  static const double tinyPadding = 4.0;
-  
-  // Text sizes
-  static const double headingTextSize = 24.0;
-  static const double subheadingTextSize = 16.0;
-  static const double bodyTextSize = 14.0;
-  static const double captionTextSize = 12.0;
-  
-  // Border radius
-  static const double cardBorderRadius = 12.0;
-  static const double buttonBorderRadius = 20.0;
-}
diff --git a/vimbisopay_app/lib/presentation/screens/auth_screen.dart b/vimbisopay_app/lib/presentation/screens/auth_screen.dart
index 871493b..5df1034 100644
--- a/vimbisopay_app/lib/presentation/screens/auth_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/auth_screen.dart
@@ -31,7 +31,6 @@ class _AuthScreenState extends State<AuthScreen> {
   bool _usesBiometric = false;
   User? _user;
   bool _isDisposed = false;
-  bool _isAuthenticating = false;
 
   @override
   void initState() {
@@ -121,7 +120,7 @@ class _AuthScreenState extends State<AuthScreen> {
               Expanded(
                 child: Text(
                   _usesBiometric ? 'Biometric Authentication' : 'PIN Authentication',
-                  style: const TextStyle(
+                  style: TextStyle(
                     fontSize: 16,
                     fontWeight: FontWeight.bold,
                     color: AppColors.info,
@@ -135,7 +134,7 @@ class _AuthScreenState extends State<AuthScreen> {
             _usesBiometric
                 ? 'Use your fingerprint or face recognition to securely access your account.'
                 : 'Enter your 4-digit PIN to securely access your account.',
-            style: const TextStyle(
+            style: TextStyle(
               color: AppColors.textPrimary,
               height: 1.4,
             ),
@@ -154,14 +153,14 @@ class _AuthScreenState extends State<AuthScreen> {
         borderRadius: BorderRadius.circular(8),
         border: Border.all(color: AppColors.warning.withOpacity(0.3)),
       ),
-      child: const Row(
+      child: Row(
         children: [
           Icon(
             Icons.info_outline,
             color: AppColors.warning,
             size: 20,
           ),
-          SizedBox(width: 8),
+          const SizedBox(width: 8),
           Expanded(
             child: Text(
               'Never share your PIN or allow biometric access to anyone else.',
@@ -177,10 +176,8 @@ class _AuthScreenState extends State<AuthScreen> {
     );
   }
 
-  Future<void> _navigateToHome() async {
-    if (_user == null || _isAuthenticating) return;
-    
-    _isAuthenticating = true;
+  Future<void> _saveUserAndNavigateHome() async {
+    if (_user == null) return;
     
     final result = await _repository.saveUser(_user!);
     
@@ -188,38 +185,33 @@ class _AuthScreenState extends State<AuthScreen> {
 
     result.fold(
       (failure) {
-        _isAuthenticating = false;
         ScaffoldMessenger.of(context).showSnackBar(
           SnackBar(
             content: Text(
               'Failed to save user data: ${failure.message}',
-              style: const TextStyle(color: AppColors.textPrimary),
+              style: TextStyle(color: AppColors.textPrimary),
             ),
             backgroundColor: AppColors.error,
           ),
         );
       },
-      (_) {
-        Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false);
-      },
+      (_) => Navigator.of(context).pushNamedAndRemoveUntil('/home', (route) => false),
     );
   }
 
   Future<void> _authenticateWithBiometric() async {
-    if (_isAuthenticating) return;
-    
     final (authenticated, errorMessage) = await _securityService.authenticateWithBiometrics();
     
     if (!mounted || _isDisposed) return;
 
     if (authenticated) {
-      await _navigateToHome();
+      await _saveUserAndNavigateHome();
     } else if (errorMessage != null) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(
           content: Text(
             errorMessage,
-            style: const TextStyle(color: AppColors.textPrimary),
+            style: TextStyle(color: AppColors.textPrimary),
           ),
           backgroundColor: AppColors.surface,
           duration: const Duration(seconds: 3),
@@ -245,20 +237,18 @@ class _AuthScreenState extends State<AuthScreen> {
   }
 
   Future<void> _verifyPin(String pin) async {
-    if (_isAuthenticating) return;
-    
     final isValid = await _securityService.verifyPin(pin);
     if (isValid && mounted && !_isDisposed) {
-      await _navigateToHome();
+      await _saveUserAndNavigateHome();
     } else if (mounted && !_isDisposed) {
       ScaffoldMessenger.of(context).showSnackBar(
-        const SnackBar(
+        SnackBar(
           content: Text(
             'Invalid PIN. Please try again.',
             style: TextStyle(color: AppColors.textPrimary),
           ),
           backgroundColor: AppColors.error,
-          duration: Duration(seconds: 2),
+          duration: const Duration(seconds: 2),
         ),
       );
       setState(() {
@@ -275,7 +265,7 @@ class _AuthScreenState extends State<AuthScreen> {
   @override
   Widget build(BuildContext context) {
     if (_isLoading) {
-      return const Scaffold(
+      return Scaffold(
         backgroundColor: AppColors.background,
         body: Center(
           child: CircularProgressIndicator(
@@ -285,7 +275,7 @@ class _AuthScreenState extends State<AuthScreen> {
       );
     }
 
-    const TextStyle pinTextStyle = TextStyle(
+    final TextStyle pinTextStyle = TextStyle(
       color: AppColors.textPrimary,
       fontSize: 20,
       fontWeight: FontWeight.bold,
@@ -307,7 +297,7 @@ class _AuthScreenState extends State<AuthScreen> {
             const SizedBox(height: 32),
             _buildAuthBanner(),
             if (_usesBiometric) ...[
-              const Icon(
+              Icon(
                 Icons.fingerprint,
                 size: 72,
                 color: AppColors.info,
@@ -345,7 +335,7 @@ class _AuthScreenState extends State<AuthScreen> {
                 child: const Text('Use PIN Instead'),
               ),
             ] else ...[
-              const Text(
+              Text(
                 'Enter PIN',
                 style: TextStyle(
                   fontSize: 24,
diff --git a/vimbisopay_app/lib/presentation/screens/create_account_screen.dart b/vimbisopay_app/lib/presentation/screens/create_account_screen.dart
index 025d27c..2515d41 100644
--- a/vimbisopay_app/lib/presentation/screens/create_account_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/create_account_screen.dart
@@ -51,7 +51,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
           color: AppColors.info.withOpacity(0.3),
         ),
       ),
-      child: const Column(
+      child: Column(
         children: [
           Row(
             children: [
@@ -60,7 +60,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                 color: AppColors.info,
                 size: 24,
               ),
-              SizedBox(width: 12),
+              const SizedBox(width: 12),
               Expanded(
                 child: Text(
                   'Why we need your information',
@@ -73,7 +73,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
               ),
             ],
           ),
-          SizedBox(height: 8),
+          const SizedBox(height: 8),
           Text(
             'Your phone number will be your unique identifier for secure transactions. We use your name to personalize your experience and verify your identity when sending or receiving money.',
             style: TextStyle(
@@ -103,12 +103,12 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
       countryListTheme: CountryListThemeData(
         borderRadius: BorderRadius.circular(12),
         backgroundColor: AppColors.surface,
-        textStyle: const TextStyle(color: AppColors.textPrimary),
-        searchTextStyle: const TextStyle(color: AppColors.textPrimary),
+        textStyle: TextStyle(color: AppColors.textPrimary),
+        searchTextStyle: TextStyle(color: AppColors.textPrimary),
         inputDecoration: InputDecoration(
           labelText: 'Search',
-          labelStyle: const TextStyle(color: AppColors.textSecondary),
-          prefixIcon: const Icon(Icons.search, color: AppColors.primary),
+          labelStyle: TextStyle(color: AppColors.textSecondary),
+          prefixIcon: Icon(Icons.search, color: AppColors.primary),
           border: OutlineInputBorder(
             borderRadius: BorderRadius.circular(8),
             borderSide: BorderSide(color: AppColors.primary.withOpacity(0.3)),
@@ -119,7 +119,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
           ),
           focusedBorder: OutlineInputBorder(
             borderRadius: BorderRadius.circular(8),
-            borderSide: const BorderSide(color: AppColors.primary),
+            borderSide: BorderSide(color: AppColors.primary),
           ),
         ),
       ),
@@ -138,12 +138,12 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
       context: context,
       builder: (context) => AlertDialog(
         backgroundColor: AppColors.surface,
-        title: const Text('Error', style: TextStyle(color: AppColors.error)),
-        content: Text(message, style: const TextStyle(color: AppColors.textPrimary)),
+        title: Text('Error', style: TextStyle(color: AppColors.error)),
+        content: Text(message, style: TextStyle(color: AppColors.textPrimary)),
         actions: [
           TextButton(
             onPressed: () => Navigator.pop(context),
-            child: const Text('OK', style: TextStyle(color: AppColors.primary)),
+            child: Text('OK', style: TextStyle(color: AppColors.primary)),
           ),
         ],
       ),
@@ -165,7 +165,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
         barrierDismissible: false,
         builder: (context) => WillPopScope(
           onWillPop: () async => false,
-          child: const Center(
+          child: Center(
             child: CircularProgressIndicator(
               valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
             ),
@@ -244,11 +244,11 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
       enabledBorder: inputBorder,
       focusedBorder: OutlineInputBorder(
         borderRadius: BorderRadius.circular(8),
-        borderSide: const BorderSide(color: AppColors.primary),
+        borderSide: BorderSide(color: AppColors.primary),
       ),
-      labelStyle: const TextStyle(color: AppColors.textSecondary),
+      labelStyle: TextStyle(color: AppColors.textSecondary),
       helperStyle: TextStyle(color: AppColors.textSecondary.withOpacity(0.7)),
-      errorStyle: const TextStyle(color: AppColors.error),
+      errorStyle: TextStyle(color: AppColors.error),
     );
 
     return Scaffold(
@@ -259,7 +259,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
         foregroundColor: AppColors.textPrimary,
         elevation: 0,
         leading: IconButton(
-          icon: const Icon(Icons.arrow_back, color: AppColors.primary),
+          icon: Icon(Icons.arrow_back, color: AppColors.primary),
           onPressed: () => Navigator.of(context).pop(),
         ),
       ),
@@ -274,7 +274,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
             child: Column(
               crossAxisAlignment: CrossAxisAlignment.stretch,
               children: [
-                const Text(
+                Text(
                   'Welcome to VimbisoPay!',
                   style: TextStyle(
                     fontSize: 24,
@@ -284,7 +284,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                   textAlign: TextAlign.center,
                 ),
                 const SizedBox(height: 12),
-                const Text(
+                Text(
                   'Create your account to start sending and receiving money securely across borders.',
                   style: TextStyle(
                     fontSize: 16,
@@ -324,7 +324,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                 Column(
                   crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
-                    const Text(
+                    Text(
                       'Phone Number',
                       style: TextStyle(
                         fontSize: 16,
@@ -352,9 +352,9 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                                   const SizedBox(width: 8),
                                   Text(
                                     '+${_selectedCountry.phoneCode}',
-                                    style: const TextStyle(color: AppColors.textPrimary),
+                                    style: TextStyle(color: AppColors.textPrimary),
                                   ),
-                                  const Icon(
+                                  Icon(
                                     Icons.arrow_drop_down,
                                     color: AppColors.primary,
                                   ),
@@ -397,7 +397,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                     labelText: 'Password',
                     errorText: _passwordError,
                     helperText: 'Must be at least 6 characters long',
-                    suffixIcon: const Icon(Icons.lock_outline, color: AppColors.primary),
+                    suffixIcon: Icon(Icons.lock_outline, color: AppColors.primary),
                   ),
                   obscureText: true,
                   validator: (value) {
@@ -417,7 +417,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                     labelText: 'Verify Password',
                     errorText: _verifyPasswordError,
                     helperText: 'Re-enter your password to confirm',
-                    suffixIcon: const Icon(Icons.lock_outline, color: AppColors.primary),
+                    suffixIcon: Icon(Icons.lock_outline, color: AppColors.primary),
                   ),
                   obscureText: true,
                   validator: (value) {
@@ -434,13 +434,13 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                 CheckboxListTile(
                   title: Wrap(
                     children: [
-                      const Text(
+                      Text(
                         'I accept the ',
                         style: TextStyle(color: AppColors.textPrimary),
                       ),
                       GestureDetector(
                         onTap: _launchTermsUrl,
-                        child: const Text(
+                        child: Text(
                           'terms and conditions',
                           style: TextStyle(
                             color: AppColors.primary,
@@ -469,7 +469,7 @@ class _CreateAccountScreenState extends State<CreateAccountScreen> {
                     disabledBackgroundColor: AppColors.primary.withOpacity(0.5),
                   ),
                   child: _isLoading
-                      ? const SizedBox(
+                      ? SizedBox(
                           height: 20,
                           width: 20,
                           child: CircularProgressIndicator(
diff --git a/vimbisopay_app/lib/presentation/screens/forgot_password_screen.dart b/vimbisopay_app/lib/presentation/screens/forgot_password_screen.dart
index 141cb70..abe0e2d 100644
--- a/vimbisopay_app/lib/presentation/screens/forgot_password_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/forgot_password_screen.dart
@@ -58,14 +58,14 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
           color: AppColors.primary.withOpacity(0.2),
         ),
       ),
-      child: const Column(
+      child: Column(
         children: [
           Icon(
             Icons.lock_reset,
             size: 48,
             color: AppColors.primary,
           ),
-          SizedBox(height: 16),
+          const SizedBox(height: 16),
           Text(
             'Reset Password',
             style: TextStyle(
@@ -75,7 +75,7 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
             ),
             textAlign: TextAlign.center,
           ),
-          SizedBox(height: 8),
+          const SizedBox(height: 8),
           Text(
             'Enter your phone number and we\'ll send you instructions to reset your password.',
             style: TextStyle(
@@ -107,13 +107,13 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
           ),
           child: Column(
             children: [
-              const Icon(
+              Icon(
                 Icons.check_circle_outline,
                 color: AppColors.success,
                 size: 64,
               ),
               const SizedBox(height: 16),
-              const Text(
+              Text(
                 'Instructions Sent!',
                 style: TextStyle(
                   fontSize: 20,
@@ -125,7 +125,7 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
               const SizedBox(height: 8),
               Text(
                 'We\'ve sent password reset instructions to +${_phoneController.text}',
-                style: const TextStyle(
+                style: TextStyle(
                   fontSize: 14,
                   height: 1.4,
                   color: AppColors.textPrimary,
@@ -190,11 +190,11 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
       enabledBorder: inputBorder,
       focusedBorder: OutlineInputBorder(
         borderRadius: BorderRadius.circular(8),
-        borderSide: const BorderSide(color: AppColors.primary),
+        borderSide: BorderSide(color: AppColors.primary),
       ),
-      labelStyle: const TextStyle(color: AppColors.textSecondary),
+      labelStyle: TextStyle(color: AppColors.textSecondary),
       helperStyle: TextStyle(color: AppColors.textSecondary.withOpacity(0.7)),
-      errorStyle: const TextStyle(color: AppColors.error),
+      errorStyle: TextStyle(color: AppColors.error),
       prefixIconColor: AppColors.primary,
     );
 
@@ -216,7 +216,7 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
         foregroundColor: AppColors.textPrimary,
         elevation: 0,
         leading: IconButton(
-          icon: const Icon(Icons.arrow_back, color: AppColors.primary),
+          icon: Icon(Icons.arrow_back, color: AppColors.primary),
           onPressed: () => Navigator.of(context).pop(),
         ),
       ),
@@ -262,7 +262,7 @@ class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
                           ),
                         ),
                         child: _isLoading
-                            ? const SizedBox(
+                            ? SizedBox(
                                 height: 20,
                                 width: 20,
                                 child: CircularProgressIndicator(
diff --git a/vimbisopay_app/lib/presentation/screens/forgot_pin_screen.dart b/vimbisopay_app/lib/presentation/screens/forgot_pin_screen.dart
index 9935ea8..cf91161 100644
--- a/vimbisopay_app/lib/presentation/screens/forgot_pin_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/forgot_pin_screen.dart
@@ -148,14 +148,14 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
           barrierDismissible: false,
           builder: (context) => AlertDialog(
             backgroundColor: AppColors.surface,
-            title: const Row(
+            title: Row(
               children: [
                 Icon(
                   Icons.check_circle,
                   color: AppColors.success,
                   size: 24,
                 ),
-                SizedBox(width: 8),
+                const SizedBox(width: 8),
                 Text(
                   'PIN Reset Successful',
                   style: TextStyle(
@@ -165,7 +165,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                 ),
               ],
             ),
-            content: const Text(
+            content: Text(
               'Your PIN has been successfully reset. You will now be redirected to the login screen.',
               style: TextStyle(color: AppColors.textPrimary),
             ),
@@ -217,9 +217,9 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
       enabledBorder: inputBorder,
       focusedBorder: OutlineInputBorder(
         borderRadius: BorderRadius.circular(8),
-        borderSide: const BorderSide(color: AppColors.primary),
+        borderSide: BorderSide(color: AppColors.primary),
       ),
-      labelStyle: const TextStyle(color: AppColors.textSecondary),
+      labelStyle: TextStyle(color: AppColors.textSecondary),
       prefixIconColor: AppColors.primary,
     );
 
@@ -233,7 +233,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
             borderRadius: BorderRadius.circular(12),
             border: Border.all(color: AppColors.info.withOpacity(0.3)),
           ),
-          child: const Column(
+          child: Column(
             children: [
               Row(
                 children: [
@@ -242,7 +242,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                     color: AppColors.info,
                     size: 24,
                   ),
-                  SizedBox(width: 12),
+                  const SizedBox(width: 12),
                   Expanded(
                     child: Text(
                       'Verify Your Identity',
@@ -255,7 +255,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                   ),
                 ],
               ),
-              SizedBox(height: 8),
+              const SizedBox(height: 8),
               Text(
                 'To reset your PIN, we need to verify your identity first.',
                 style: TextStyle(
@@ -279,7 +279,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
             ),
           ),
           const SizedBox(height: 24),
-          const Text(
+          Text(
             'OR',
             style: TextStyle(
               color: AppColors.textSecondary,
@@ -342,7 +342,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                       disabledBackgroundColor: AppColors.primary.withOpacity(0.5),
                     ),
                     child: _isLoading
-                        ? const SizedBox(
+                        ? SizedBox(
                             height: 20,
                             width: 20,
                             child: CircularProgressIndicator(
@@ -362,7 +362,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
   }
 
   Widget _buildPinResetSection() {
-    const TextStyle pinTextStyle = TextStyle(
+    final TextStyle pinTextStyle = TextStyle(
       color: AppColors.textPrimary,
       fontSize: 20,
       fontWeight: FontWeight.bold,
@@ -380,14 +380,14 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
           ),
           child: Column(
             children: [
-              const Row(
+              Row(
                 children: [
                   Icon(
                     Icons.check_circle,
                     color: AppColors.success,
                     size: 24,
                   ),
-                  SizedBox(width: 12),
+                  const SizedBox(width: 12),
                   Expanded(
                     child: Text(
                       'Identity Verified',
@@ -405,7 +405,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                 _pin.isEmpty
                     ? 'Enter your new PIN'
                     : 'Confirm your new PIN',
-                style: const TextStyle(
+                style: TextStyle(
                   color: AppColors.textPrimary,
                   height: 1.4,
                 ),
@@ -481,7 +481,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                 ),
                 child: Row(
                   children: [
-                    const Icon(
+                    Icon(
                       Icons.error_outline,
                       color: AppColors.error,
                       size: 20,
@@ -490,7 +490,7 @@ class _ForgotPINScreenState extends State<ForgotPINScreen> {
                     Expanded(
                       child: Text(
                         _errorMessage,
-                        style: const TextStyle(
+                        style: TextStyle(
                           color: AppColors.error,
                           fontSize: 14,
                         ),
diff --git a/vimbisopay_app/lib/presentation/screens/home_screen.dart b/vimbisopay_app/lib/presentation/screens/home_screen.dart
index 3f6bc33..4685a2b 100644
--- a/vimbisopay_app/lib/presentation/screens/home_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/home_screen.dart
@@ -1,21 +1,13 @@
 import 'package:flutter/material.dart';
-import 'package:flutter_bloc/flutter_bloc.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/core/utils/ui_utils.dart';
-import 'package:vimbisopay_app/domain/entities/ledger_entry.dart';
-import 'package:vimbisopay_app/domain/repositories/account_repository.dart';
-import 'package:vimbisopay_app/infrastructure/repositories/account_repository_impl.dart';
+import 'package:vimbisopay_app/infrastructure/services/security_service.dart';
 import 'package:vimbisopay_app/infrastructure/database/database_helper.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_bloc.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_event.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_state.dart';
-import 'package:vimbisopay_app/presentation/constants/home_constants.dart';
+import 'package:vimbisopay_app/core/theme/app_colors.dart';
 import 'package:vimbisopay_app/presentation/screens/auth_screen.dart';
 import 'package:vimbisopay_app/presentation/screens/settings_screen.dart';
-import 'package:vimbisopay_app/presentation/widgets/account_card.dart';
-import 'package:vimbisopay_app/presentation/widgets/home_action_buttons.dart';
-import 'package:vimbisopay_app/presentation/widgets/page_indicator.dart';
-import 'package:vimbisopay_app/presentation/widgets/transactions_list.dart';
+import 'package:vimbisopay_app/domain/repositories/account_repository.dart';
+import 'package:vimbisopay_app/infrastructure/repositories/account_repository_impl.dart';
+import 'package:vimbisopay_app/application/usecases/get_member_dashboard.dart';
+import 'package:vimbisopay_app/domain/entities/dashboard.dart';
 
 class HomeScreen extends StatefulWidget {
   const HomeScreen({super.key});
@@ -25,438 +17,256 @@ class HomeScreen extends StatefulWidget {
 }
 
 class _HomeScreenState extends State<HomeScreen> with WidgetsBindingObserver {
-  final PageController _pageController = PageController();
-  final ScrollController _scrollController = ScrollController();
-  final AccountRepository _accountRepository = AccountRepositoryImpl();
+  final SecurityService _securityService = SecurityService();
   final DatabaseHelper _databaseHelper = DatabaseHelper();
-  late final HomeBloc _homeBloc;
-  bool _isAuthenticating = false;
+  final AccountRepository _accountRepository = AccountRepositoryImpl();
+  late final GetMemberDashboard _getMemberDashboard;
+  
+  bool _isCheckingAuth = false;
+  bool _isLoadingDashboard = false;
+  Dashboard? _dashboard;
+  String? _error;
 
   @override
   void initState() {
     super.initState();
-    _setupScrollListener();
+    _getMemberDashboard = GetMemberDashboard(_accountRepository);
     WidgetsBinding.instance.addObserver(this);
-    _homeBloc = HomeBloc();
-    _loadInitialData();
+    _checkAuthentication();
+  }
+
+  @override
+  void dispose() {
+    WidgetsBinding.instance.removeObserver(this);
+    super.dispose();
   }
 
   @override
   void didChangeAppLifecycleState(AppLifecycleState state) {
-    if (state == AppLifecycleState.resumed && !_isAuthenticating && mounted) {
-      _refreshData();
+    if (state == AppLifecycleState.resumed) {
+      _checkAuthentication();
     }
   }
 
-  void _setupScrollListener() {
-    _scrollController.addListener(() {
-      if (_scrollController.position.pixels >=
-          _scrollController.position.maxScrollExtent * 0.8) {
-        _loadMoreLedger();
-      }
+  Future<void> _checkAuthentication() async {
+    if (_isCheckingAuth) return;
+    
+    setState(() {
+      _isCheckingAuth = true;
+      _error = null;
     });
-  }
-
-  Future<void> _loadInitialData() async {
-    _homeBloc.add(const HomeLoadStarted());
 
     try {
-      final user = await _databaseHelper.getUser();
-      if (user != null) {
-        // Get dashboard first to get accounts
-        final dashboardResult = await _accountRepository.getMemberDashboardByPhone(user.phone);
-        
-        await dashboardResult.fold(
-          (failure) async {
-            _homeBloc.add(HomeErrorOccurred(failure.message));
-          },
-          (dashboard) async {
-            if (dashboard.accounts.isEmpty) {
-              _homeBloc.add(const HomeErrorOccurred('No accounts found'));
-              return;
-            }
-
-            _homeBloc.add(HomeDataLoaded(dashboard: dashboard, user: user));
-
-            // Get ledger for all accounts
-            final Map<String, List<LedgerEntry>> accountLedgers = {};
-            bool hasMoreEntries = false;
-
-            for (final account in dashboard.accounts) {
-              final ledgerResult = await _accountRepository.getLedger(
-                accountId: account.accountID,
-                startRow: 0,
-                numRows: HomeConstants.ledgerPageSize,
-              );
-
-              ledgerResult.fold(
-                (failure) => _homeBloc.add(HomeErrorOccurred(failure.message)),
-                (response) {
-                  final data = response['data'] as Map<String, dynamic>;
-                  final dashboardData = data['dashboard'] as Map<String, dynamic>;
-                  final ledger = dashboardData['ledger'] as List;
-                  final pagination = dashboardData['pagination'] as Map<String, dynamic>;
-
-                  final entries = ledger
-                      .map((entry) => LedgerEntry.fromJson(
-                            entry as Map<String, dynamic>,
-                            accountId: account.accountID,
-                            accountName: account.accountName,
-                          ))
-                      .toList();
-                  
-                  accountLedgers[account.accountID] = entries;
-                  hasMoreEntries = hasMoreEntries || (pagination['hasMore'] as bool? ?? false);
-                },
-              );
-            }
-
-            // Combine and sort all entries
-            final combinedEntries = _updateCombinedLedger(accountLedgers);
-
-            _homeBloc.add(HomeLedgerLoaded(
-              accountLedgers: accountLedgers,
-              combinedEntries: combinedEntries,
-              hasMore: hasMoreEntries,
-            ));
-          },
-        );
+      final requiresAuth = await _securityService.requiresAuthentication();
+      if (requiresAuth && mounted) {
+        final user = await _databaseHelper.getUser();
+        if (user != null && mounted) {
+          await Navigator.push(
+            context,
+            MaterialPageRoute(
+              builder: (context) => AuthScreen(user: user),
+            ),
+          );
+          // After successful authentication, fetch dashboard
+          _fetchDashboard();
+        } else if (mounted) {
+          Navigator.pushReplacementNamed(context, '/login');
+        }
+      } else {
+        // If no auth required, fetch dashboard directly
+        _fetchDashboard();
+      }
+    } finally {
+      if (mounted) {
+        setState(() {
+          _isCheckingAuth = false;
+        });
       }
-    } catch (e) {
-      _homeBloc.add(const HomeErrorOccurred('Failed to load data'));
     }
   }
 
-  Future<void> _refreshData() async {
-    _homeBloc.add(const HomeRefreshStarted());
+  Future<void> _fetchDashboard() async {
+    if (!mounted) return;
+
+    setState(() {
+      _isLoadingDashboard = true;
+      _error = null;
+    });
 
     try {
       final user = await _databaseHelper.getUser();
       if (user != null) {
-        // Get dashboard first to get accounts
-        final dashboardResult = await _accountRepository.getMemberDashboardByPhone(user.phone);
+        final result = await _getMemberDashboard.execute(user.phone);
         
-        await dashboardResult.fold(
-          (failure) async {
-            _homeBloc.add(HomeErrorOccurred(failure.message));
-          },
-          (dashboard) async {
-            if (dashboard.accounts.isEmpty) {
-              _homeBloc.add(const HomeErrorOccurred('No accounts found'));
-              return;
+        result.fold(
+          (failure) {
+            if (mounted) {
+              setState(() {
+                _error = failure.message;
+                _isLoadingDashboard = false;
+              });
             }
-
-            _homeBloc.add(HomeDataLoaded(dashboard: dashboard, user: user));
-
-            // Get ledger for all accounts
-            final Map<String, List<LedgerEntry>> accountLedgers = {};
-            bool hasMoreEntries = false;
-
-            for (final account in dashboard.accounts) {
-              final ledgerResult = await _accountRepository.getLedger(
-                accountId: account.accountID,
-                startRow: 0,
-                numRows: HomeConstants.ledgerPageSize,
-              );
-
-              ledgerResult.fold(
-                (failure) => _homeBloc.add(HomeErrorOccurred(failure.message)),
-                (response) {
-                  final data = response['data'] as Map<String, dynamic>;
-                  final dashboardData = data['dashboard'] as Map<String, dynamic>;
-                  final ledger = dashboardData['ledger'] as List;
-                  final pagination = dashboardData['pagination'] as Map<String, dynamic>;
-
-                  final entries = ledger
-                      .map((entry) => LedgerEntry.fromJson(
-                            entry as Map<String, dynamic>,
-                            accountId: account.accountID,
-                            accountName: account.accountName,
-                          ))
-                      .toList();
-                  
-                  accountLedgers[account.accountID] = entries;
-                  hasMoreEntries = hasMoreEntries || (pagination['hasMore'] as bool? ?? false);
-                },
-              );
+          },
+          (dashboard) {
+            if (mounted) {
+              setState(() {
+                _dashboard = dashboard;
+                _isLoadingDashboard = false;
+              });
             }
-
-            // Combine and sort all entries
-            final combinedEntries = _updateCombinedLedger(accountLedgers);
-
-            _homeBloc.add(HomeLedgerLoaded(
-              accountLedgers: accountLedgers,
-              combinedEntries: combinedEntries,
-              hasMore: hasMoreEntries,
-            ));
           },
         );
       }
     } catch (e) {
-      _homeBloc.add(const HomeErrorOccurred('Failed to refresh data'));
-    }
-  }
-
-  Future<void> _loadMoreLedger() async {
-    final state = _homeBloc.state;
-    if (state.dashboard == null || !state.hasMoreEntries) return;
-    
-    _homeBloc.add(const HomeLoadMoreStarted());
-
-    try {
-      final Map<String, List<LedgerEntry>> updatedLedgers = Map.from(state.accountLedgers);
-      bool hasMoreEntries = false;
-
-      for (final account in state.dashboard!.accounts) {
-        final startRow = state.accountLedgers[account.accountID]?.length ?? 0;
-        
-        final result = await _accountRepository.getLedger(
-          accountId: account.accountID,
-          startRow: startRow,
-          numRows: HomeConstants.ledgerPageSize,
-        );
-
-        result.fold(
-          (failure) => _homeBloc.add(HomeErrorOccurred(failure.message)),
-          (response) {
-            final data = response['data'] as Map<String, dynamic>;
-            final dashboardData = data['dashboard'] as Map<String, dynamic>;
-            final ledger = dashboardData['ledger'] as List;
-            final pagination = dashboardData['pagination'] as Map<String, dynamic>;
-
-            final entries = ledger
-                .map((entry) => LedgerEntry.fromJson(
-                      entry as Map<String, dynamic>,
-                      accountId: account.accountID,
-                      accountName: account.accountName,
-                    ))
-                .toList();
-            
-            updatedLedgers.update(
-              account.accountID,
-              (list) => list..addAll(entries),
-              ifAbsent: () => entries,
-            );
-            
-            hasMoreEntries = hasMoreEntries || (pagination['hasMore'] as bool? ?? false);
-          },
-        );
+      if (mounted) {
+        setState(() {
+          _error = 'Failed to load dashboard';
+          _isLoadingDashboard = false;
+        });
       }
-
-      final combinedEntries = _updateCombinedLedger(updatedLedgers);
-
-      _homeBloc.add(HomeLedgerLoaded(
-        accountLedgers: updatedLedgers,
-        combinedEntries: combinedEntries,
-        hasMore: hasMoreEntries,
-      ));
-    } catch (e) {
-      _homeBloc.add(const HomeErrorOccurred('Failed to load more entries'));
     }
   }
 
-  List<LedgerEntry> _updateCombinedLedger(Map<String, List<LedgerEntry>> accountLedgers) {
-    final allEntries = accountLedgers.values.expand((entries) => entries).toList();
-    allEntries.sort((a, b) => b.timestamp.compareTo(a.timestamp));
-    return allEntries;
+  void _onSettingsTap() {
+    Navigator.push(
+      context,
+      MaterialPageRoute(
+        builder: (context) => const SettingsScreen(),
+      ),
+    );
   }
 
-  @override
-  void dispose() {
-    _pageController.dispose();
-    _scrollController.dispose();
-    WidgetsBinding.instance.removeObserver(this);
-    _homeBloc.close();
-    super.dispose();
+  void _retryFetch() {
+    _fetchDashboard();
   }
 
-  PreferredSize _buildAppBar(HomeState state) {
-    return PreferredSize(
-      preferredSize: const Size.fromHeight(HomeConstants.appBarHeight),
-      child: AppBar(
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      backgroundColor: AppColors.background,
+      appBar: AppBar(
+        title: const Text('Home'),
         backgroundColor: AppColors.surface,
         foregroundColor: AppColors.textPrimary,
-        leadingWidth: 80,
-        toolbarHeight: HomeConstants.appBarHeight,
-        leading: _buildUserAvatar(state),
         actions: [
-          Padding(
-            padding: const EdgeInsets.all(12.0),
-            child: IconButton(
-              icon: const Icon(Icons.settings),
-              onPressed: () => _navigateToSettings(),
-              tooltip: 'Settings',
-            ),
+          IconButton(
+            icon: const Icon(Icons.settings),
+            onPressed: _onSettingsTap,
+            tooltip: 'Settings',
           ),
         ],
       ),
-    );
-  }
-
-  Widget _buildUserAvatar(HomeState state) {
-    return Padding(
-      padding: const EdgeInsets.only(
-        left: 12.0,
-        top: 12.0,
-        bottom: 12.0,
-      ),
-      child: Stack(
-        clipBehavior: Clip.none,
-        children: [
-          CircleAvatar(
-            backgroundColor: AppColors.primary.withOpacity(0.1),
-            child: state.dashboard != null
-                ? Text(
-                    UIUtils.getInitials(
-                      state.dashboard!.firstname,
-                      state.dashboard!.lastname,
+      body: SafeArea(
+        child: Padding(
+          padding: const EdgeInsets.all(24.0),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.stretch,
+            children: [
+              if (_isCheckingAuth || _isLoadingDashboard)
+                const Center(
+                  child: CircularProgressIndicator(
+                    valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
+                  ),
+                )
+              else if (_error != null)
+                Center(
+                  child: Column(
+                    mainAxisAlignment: MainAxisAlignment.center,
+                    children: [
+                      Text(
+                        _error!,
+                        style: const TextStyle(
+                          color: AppColors.error,
+                          fontSize: 16,
+                        ),
+                        textAlign: TextAlign.center,
+                      ),
+                      const SizedBox(height: 16),
+                      TextButton.icon(
+                        onPressed: _retryFetch,
+                        icon: const Icon(Icons.refresh),
+                        label: const Text('Retry'),
+                        style: TextButton.styleFrom(
+                          foregroundColor: AppColors.primary,
+                        ),
+                      ),
+                    ],
+                  ),
+                )
+              else if (_dashboard != null)
+                Column(
+                  children: [
+                    Text(
+                      'Welcome, ${_dashboard!.firstname} ${_dashboard!.lastname}',
+                      style: const TextStyle(
+                        fontSize: 28,
+                        fontWeight: FontWeight.bold,
+                        color: AppColors.textPrimary,
+                      ),
+                      textAlign: TextAlign.center,
                     ),
-                    style: const TextStyle(
-                      color: AppColors.primary,
-                      fontWeight: FontWeight.bold,
+                    const SizedBox(height: 24),
+                    Card(
+                      color: AppColors.surface,
+                      elevation: 4,
+                      shape: RoundedRectangleBorder(
+                        borderRadius: BorderRadius.circular(16),
+                        side: const BorderSide(
+                          color: AppColors.primary,
+                          width: 2,
+                        ),
+                      ),
+                      child: Padding(
+                        padding: const EdgeInsets.all(24.0),
+                        child: Column(
+                          children: [
+                            const Text(
+                              'Member Handle',
+                              style: TextStyle(
+                                fontSize: 16,
+                                color: AppColors.textSecondary,
+                              ),
+                            ),
+                            const SizedBox(height: 8),
+                            SelectableText(
+                              _dashboard!.memberHandle,
+                              style: const TextStyle(
+                                fontSize: 24,
+                                fontWeight: FontWeight.bold,
+                                color: AppColors.textPrimary,
+                                letterSpacing: 1.2,
+                              ),
+                            ),
+                            if (_dashboard!.accounts.isNotEmpty) ...[
+                              const SizedBox(height: 24),
+                              const Text(
+                                'Balance',
+                                style: TextStyle(
+                                  fontSize: 16,
+                                  color: AppColors.textSecondary,
+                                ),
+                              ),
+                              const SizedBox(height: 8),
+                              Text(
+                                _dashboard!.accounts.first.balanceData.netCredexAssetsInDefaultDenom,
+                                style: const TextStyle(
+                                  fontSize: 32,
+                                  fontWeight: FontWeight.bold,
+                                  color: AppColors.primary,
+                                  letterSpacing: 1.2,
+                                ),
+                              ),
+                            ],
+                          ],
+                        ),
+                      ),
                     ),
-                  )
-                : const Icon(
-                    Icons.person_outline,
-                    color: AppColors.primary,
-                  ),
-          ),
-          if (state.user != null) _buildTierBadge(state),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildTierBadge(HomeState state) {
-    return Positioned(
-      right: -8,
-      bottom: -8,
-      child: Container(
-        padding: const EdgeInsets.only(
-          left: 8,
-          right: 8,
-          top: 4,
-          bottom: 6,
-        ),
-        decoration: BoxDecoration(
-          color: AppColors.primary,
-          borderRadius: BorderRadius.circular(12),
-          border: Border.all(
-            color: AppColors.surface,
-            width: 2,
-          ),
-        ),
-        child: Text(
-          state.user!.tier.toUpperCase(),
-          style: const TextStyle(
-            color: Colors.white,
-            fontSize: 10,
-            fontWeight: FontWeight.bold,
+                  ],
+                ),
+            ],
           ),
         ),
       ),
     );
   }
-
-  Widget _buildAccountsSection(HomeState state) {
-    final viewPagerHeight = UIUtils.getViewPagerHeight(context);
-    
-    return Column(
-      children: [
-        const SizedBox(height: HomeConstants.defaultPadding),
-        SizedBox(
-          height: viewPagerHeight,
-          child: PageView.builder(
-            controller: _pageController,
-            onPageChanged: (index) => _homeBloc.add(HomePageChanged(index)),
-            itemCount: state.dashboard!.accounts.length,
-            itemBuilder: (context, index) => AccountCard(
-              account: state.dashboard!.accounts[index],
-            ),
-          ),
-        ),
-        if (state.dashboard!.accounts.length > 1)
-          Padding(
-            padding: const EdgeInsets.all(HomeConstants.defaultPadding),
-            child: PageIndicator(
-              count: state.dashboard!.accounts.length,
-              currentPage: state.currentPage,
-            ),
-          ),
-      ],
-    );
-  }
-
-  Widget _buildScrollableContent(HomeState state) {
-    return RefreshIndicator(
-      onRefresh: _refreshData,
-      color: AppColors.primary,
-      child: SingleChildScrollView(
-        controller: _scrollController,
-        physics: const AlwaysScrollableScrollPhysics(),
-        child: Column(
-          children: [
-            if (state.dashboard != null) _buildAccountsSection(state),
-            const TransactionsList(),
-            // Extra space for action buttons
-            const SizedBox(height: 120),
-          ],
-        ),
-      ),
-    );
-  }
-
-  void _navigateToSettings() {
-    Navigator.push(
-      context,
-      MaterialPageRoute(
-        builder: (context) => const SettingsScreen(),
-      ),
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return BlocProvider(
-      create: (context) => _homeBloc,
-      child: BlocConsumer<HomeBloc, HomeState>(
-        listener: (context, state) async {
-          if (state.status == HomeStatus.loading && 
-              state.user != null && 
-              !_isAuthenticating) {
-            _isAuthenticating = true;
-            await Navigator.push(
-              context,
-              MaterialPageRoute(
-                builder: (context) => AuthScreen(user: state.user!),
-              ),
-            );
-            _isAuthenticating = false;
-          }
-        },
-        builder: (context, state) {
-          return Scaffold(
-            backgroundColor: Colors.transparent,
-            appBar: _buildAppBar(state),
-            body: SafeArea(
-              bottom: false,
-              child: Column(
-                children: [
-                  Expanded(
-                    child: _buildScrollableContent(state),
-                  ),
-                  HomeActionButtons(
-                    accounts: state.dashboard?.accounts,
-                    onSendTap: () {
-                      // TODO: Implement send money
-                    },
-                  ),
-                ],
-              ),
-            ),
-          );
-        },
-      ),
-    );
-  }
 }
diff --git a/vimbisopay_app/lib/presentation/screens/intro_screen.dart b/vimbisopay_app/lib/presentation/screens/intro_screen.dart
index e0eb802..d18fd27 100644
--- a/vimbisopay_app/lib/presentation/screens/intro_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/intro_screen.dart
@@ -38,7 +38,7 @@ class _IntroScreenState extends State<IntroScreen> {
           const SizedBox(height: 32),
           Text(
             title,
-            style: const TextStyle(
+            style: TextStyle(
               fontSize: 24,
               fontWeight: FontWeight.bold,
               color: AppColors.textPrimary,
@@ -50,7 +50,7 @@ class _IntroScreenState extends State<IntroScreen> {
             child: Text(
               description,
               textAlign: TextAlign.center,
-              style: const TextStyle(
+              style: TextStyle(
                 fontSize: 16,
                 color: AppColors.textSecondary,
               ),
@@ -108,7 +108,7 @@ class _IntroScreenState extends State<IntroScreen> {
               child: SmoothPageIndicator(
                 controller: _pageController,
                 count: 3,
-                effect: const WormEffect(
+                effect: WormEffect(
                   dotHeight: 10,
                   dotWidth: 10,
                   spacing: 16,
diff --git a/vimbisopay_app/lib/presentation/screens/login_screen.dart b/vimbisopay_app/lib/presentation/screens/login_screen.dart
index a720561..9f98a11 100644
--- a/vimbisopay_app/lib/presentation/screens/login_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/login_screen.dart
@@ -87,14 +87,14 @@ class _LoginScreenState extends State<LoginScreen> {
           color: AppColors.primary.withOpacity(0.2),
         ),
       ),
-      child: const Column(
+      child: Column(
         children: [
           Icon(
             Icons.account_circle_outlined,
             size: 48,
             color: AppColors.primary,
           ),
-          SizedBox(height: 16),
+          const SizedBox(height: 16),
           Text(
             'Welcome Back!',
             style: TextStyle(
@@ -104,7 +104,7 @@ class _LoginScreenState extends State<LoginScreen> {
             ),
             textAlign: TextAlign.center,
           ),
-          SizedBox(height: 8),
+          const SizedBox(height: 8),
           Text(
             'Log in to your VimbisoPay account to send money, check balances, and manage your transactions securely.',
             style: TextStyle(
@@ -130,14 +130,14 @@ class _LoginScreenState extends State<LoginScreen> {
           color: AppColors.info.withOpacity(0.2),
         ),
       ),
-      child: const Row(
+      child: Row(
         children: [
           Icon(
             Icons.security_outlined,
             color: AppColors.info,
             size: 24,
           ),
-          SizedBox(width: 12),
+          const SizedBox(width: 12),
           Expanded(
             child: Text(
               'Your security is our priority. We use industry-standard encryption to protect your information.',
@@ -167,13 +167,13 @@ class _LoginScreenState extends State<LoginScreen> {
             child: Column(
               mainAxisSize: MainAxisSize.min,
               children: [
-                const Icon(
+                Icon(
                   Icons.error_outline,
                   size: 80,
                   color: AppColors.error,
                 ),
                 const SizedBox(height: 24),
-                const Text(
+                Text(
                   'Login Failed',
                   style: TextStyle(
                     fontSize: 20,
@@ -185,7 +185,7 @@ class _LoginScreenState extends State<LoginScreen> {
                 Text(
                   message,
                   textAlign: TextAlign.center,
-                  style: const TextStyle(
+                  style: TextStyle(
                     fontSize: 16,
                     color: AppColors.textPrimary,
                   ),
@@ -265,11 +265,11 @@ class _LoginScreenState extends State<LoginScreen> {
       enabledBorder: inputBorder,
       focusedBorder: OutlineInputBorder(
         borderRadius: BorderRadius.circular(8),
-        borderSide: const BorderSide(color: AppColors.primary),
+        borderSide: BorderSide(color: AppColors.primary),
       ),
-      labelStyle: const TextStyle(color: AppColors.textSecondary),
+      labelStyle: TextStyle(color: AppColors.textSecondary),
       helperStyle: TextStyle(color: AppColors.textSecondary.withOpacity(0.7)),
-      errorStyle: const TextStyle(color: AppColors.error),
+      errorStyle: TextStyle(color: AppColors.error),
       prefixIconColor: AppColors.primary,
     );
 
@@ -295,9 +295,9 @@ class _LoginScreenState extends State<LoginScreen> {
                     children: [
                       TextFormField(
                         controller: _phoneController,
-                        decoration: const InputDecoration(
+                        decoration: InputDecoration(
                           labelText: 'Phone Number',
-                          prefixIcon: Icon(Icons.phone),
+                          prefixIcon: const Icon(Icons.phone),
                           hintText: '263712345678 or 353871234567',
                           helperText: 'Start with country code (e.g. 263 for Zimbabwe, 353 for Ireland)',
                           helperMaxLines: 2,
@@ -339,7 +339,7 @@ class _LoginScreenState extends State<LoginScreen> {
                           ),
                         ),
                         child: _isLoading
-                            ? const SizedBox(
+                            ? SizedBox(
                                 height: 20,
                                 width: 20,
                                 child: CircularProgressIndicator(
diff --git a/vimbisopay_app/lib/presentation/screens/security_setup_screen.dart b/vimbisopay_app/lib/presentation/screens/security_setup_screen.dart
index ac52ca1..f19f5e4 100644
--- a/vimbisopay_app/lib/presentation/screens/security_setup_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/security_setup_screen.dart
@@ -57,7 +57,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
         borderRadius: BorderRadius.circular(12),
         border: Border.all(color: AppColors.info.withOpacity(0.3)),
       ),
-      child: const Column(
+      child: Column(
         children: [
           Row(
             children: [
@@ -66,7 +66,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
                 color: AppColors.info,
                 size: 24,
               ),
-              SizedBox(width: 12),
+              const SizedBox(width: 12),
               Expanded(
                 child: Text(
                   'Enhanced Security Setup',
@@ -79,7 +79,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
               ),
             ],
           ),
-          SizedBox(height: 8),
+          const SizedBox(height: 8),
           Text(
             'Add an extra layer of security to protect your account. This helps ensure only you can access your money and personal information.',
             style: TextStyle(
@@ -112,7 +112,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
           SnackBar(
             content: Text(
               'Failed to save user data: ${failure.message}',
-              style: const TextStyle(color: AppColors.textPrimary),
+              style: TextStyle(color: AppColors.textPrimary),
             ),
             backgroundColor: AppColors.error,
           ),
@@ -134,7 +134,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
           SnackBar(
             content: Text(
               e.toString(),
-              style: const TextStyle(color: AppColors.textPrimary),
+              style: TextStyle(color: AppColors.textPrimary),
             ),
             backgroundColor: AppColors.error,
           ),
@@ -187,7 +187,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
     } else {
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(
-          const SnackBar(
+          SnackBar(
             content: Text(
               'PINs do not match. Please try again.',
               style: TextStyle(color: AppColors.textPrimary),
@@ -217,7 +217,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
             children: [
               Row(
                 children: [
-                  const Icon(
+                  Icon(
                     Icons.pin,
                     color: AppColors.warning,
                     size: 24,
@@ -226,7 +226,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
                   Expanded(
                     child: Text(
                       isConfirming ? 'Confirm Your PIN' : 'Create Your PIN',
-                      style: const TextStyle(
+                      style: TextStyle(
                         fontSize: 16,
                         fontWeight: FontWeight.bold,
                         color: AppColors.warning,
@@ -240,7 +240,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
                 isConfirming
                     ? 'Re-enter your PIN to confirm and complete the setup.'
                     : 'Choose a 4-digit PIN that you\'ll remember. This PIN will be used to access your account.',
-                style: const TextStyle(
+                style: TextStyle(
                   color: AppColors.textPrimary,
                   height: 1.4,
                 ),
@@ -304,8 +304,8 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
               _pinController.clear();
             }
           },
-          icon: const Icon(Icons.arrow_back, color: AppColors.primary),
-          label: const Text(
+          icon: Icon(Icons.arrow_back, color: AppColors.primary),
+          label: Text(
             'Choose Different Method',
             style: TextStyle(color: AppColors.primary),
           ),
@@ -331,13 +331,13 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
             ),
             child: Column(
               children: [
-                const Icon(
+                Icon(
                   Icons.fingerprint,
                   size: 48,
                   color: AppColors.success,
                 ),
                 const SizedBox(height: 16),
-                const Text(
+                Text(
                   'Biometric Authentication',
                   style: TextStyle(
                     fontSize: 18,
@@ -346,7 +346,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
                   ),
                 ),
                 const SizedBox(height: 8),
-                const Text(
+                Text(
                   'Use your fingerprint or face recognition for quick and secure access to your account.',
                   textAlign: TextAlign.center,
                   style: TextStyle(
@@ -369,7 +369,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
             ),
           ),
           const SizedBox(height: 24),
-          const Text(
+          Text(
             'OR',
             style: TextStyle(
               fontSize: 16,
@@ -389,13 +389,13 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
           ),
           child: Column(
             children: [
-              const Icon(
+              Icon(
                 Icons.pin,
                 size: 48,
                 color: AppColors.warning,
               ),
               const SizedBox(height: 16),
-              const Text(
+              Text(
                 'PIN Setup',
                 style: TextStyle(
                   fontSize: 18,
@@ -404,7 +404,7 @@ class _SecuritySetupScreenState extends State<SecuritySetupScreen> {
                 ),
               ),
               const SizedBox(height: 8),
-              const Text(
+              Text(
                 'Create a 4-digit PIN to secure your account. Make sure to choose a PIN you\'ll remember.',
                 textAlign: TextAlign.center,
                 style: TextStyle(
diff --git a/vimbisopay_app/lib/presentation/screens/settings_screen.dart b/vimbisopay_app/lib/presentation/screens/settings_screen.dart
index 066f70c..02bc138 100644
--- a/vimbisopay_app/lib/presentation/screens/settings_screen.dart
+++ b/vimbisopay_app/lib/presentation/screens/settings_screen.dart
@@ -83,7 +83,7 @@ class SettingsScreen extends StatelessWidget {
         child: InkWell(
           onTap: onTap,
           borderRadius: BorderRadius.circular(12),
-          overlayColor: WidgetStateProperty.all(AppColors.highlightOverlay),
+          overlayColor: MaterialStateProperty.all(AppColors.highlightOverlay),
           child: Padding(
             padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
             child: Row(
diff --git a/vimbisopay_app/lib/presentation/widgets/account_card.dart b/vimbisopay_app/lib/presentation/widgets/account_card.dart
deleted file mode 100644
index ba2adea..0000000
--- a/vimbisopay_app/lib/presentation/widgets/account_card.dart
+++ /dev/null
@@ -1,192 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/domain/entities/dashboard.dart';
-import 'package:vimbisopay_app/presentation/constants/home_constants.dart';
-
-class AccountCard extends StatelessWidget {
-  final DashboardAccount account;
-
-  const AccountCard({
-    super.key,
-    required this.account,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      width: double.infinity,
-      padding: const EdgeInsets.all(HomeConstants.defaultPadding),
-      color: AppColors.surface,
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              Row(
-                mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                crossAxisAlignment: CrossAxisAlignment.start,
-                children: [
-                  Expanded(
-                    child: Text(
-                      account.accountName,
-                      style: const TextStyle(
-                        fontSize: HomeConstants.headingTextSize,
-                        fontWeight: FontWeight.bold,
-                        color: AppColors.textPrimary,
-                      ),
-                      maxLines: 2,
-                      overflow: TextOverflow.ellipsis,
-                    ),
-                  ),
-                  const SizedBox(width: HomeConstants.tinyPadding),
-                  _buildTierLimitBadge(),
-                ],
-              ),
-              const SizedBox(height: HomeConstants.tinyPadding),
-              _buildAccountHandle(),
-            ],
-          ),
-          const SizedBox(height: HomeConstants.defaultPadding),
-          _buildBalanceSection(),
-          const SizedBox(height: HomeConstants.defaultPadding),
-          _buildPayablesSection(),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildTierLimitBadge() {
-    return Container(
-      padding: const EdgeInsets.symmetric(
-        horizontal: HomeConstants.defaultPadding - 4,
-        vertical: HomeConstants.smallPadding - 2,
-      ),
-      decoration: BoxDecoration(
-        color: AppColors.primary.withOpacity(0.1),
-        borderRadius: BorderRadius.circular(HomeConstants.buttonBorderRadius),
-      ),
-      child: const Column(
-        children: [
-          Text(
-            'Tier Limit',
-            style: TextStyle(
-              fontSize: HomeConstants.captionTextSize,
-              color: AppColors.textSecondary,
-              fontWeight: FontWeight.w500,
-            ),
-          ),
-          SizedBox(height: HomeConstants.tinyPadding - 2),
-          Text(
-            '\$10 USD/day',
-            style: TextStyle(
-              color: AppColors.primary,
-              fontWeight: FontWeight.bold,
-            ),
-          ),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildAccountHandle() {
-    return Row(
-      children: [
-        const Text(
-          '@',
-          style: TextStyle(
-            fontSize: HomeConstants.subheadingTextSize,
-            color: AppColors.primary,
-            fontWeight: FontWeight.bold,
-          ),
-        ),
-        const SizedBox(width: HomeConstants.tinyPadding - 2),
-        Flexible(
-          child: Text(
-            account.accountHandle,
-            style: const TextStyle(
-              fontSize: HomeConstants.subheadingTextSize,
-              color: AppColors.textSecondary,
-            ),
-            softWrap: true,
-          ),
-        ),
-      ],
-    );
-  }
-
-  Widget _buildBalanceSection() {
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        const Text(
-          'Net Balance',
-          style: TextStyle(
-            fontSize: HomeConstants.subheadingTextSize,
-            color: AppColors.textSecondary,
-          ),
-        ),
-        const SizedBox(height: HomeConstants.smallPadding),
-        Text(
-          account.balanceData.netCredexAssetsInDefaultDenom,
-          style: const TextStyle(
-            fontSize: 32,
-            fontWeight: FontWeight.bold,
-            color: AppColors.primary,
-          ),
-        ),
-      ],
-    );
-  }
-
-  Widget _buildPayablesSection() {
-    return Row(
-      mainAxisAlignment: MainAxisAlignment.spaceBetween,
-      children: [
-        Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            const Text(
-              'Receivables',
-              style: TextStyle(
-                fontSize: HomeConstants.bodyTextSize,
-                color: AppColors.textSecondary,
-              ),
-            ),
-            const SizedBox(height: HomeConstants.tinyPadding),
-            Text(
-              account.balanceData.unsecuredBalances.totalReceivables,
-              style: const TextStyle(
-                fontSize: HomeConstants.subheadingTextSize,
-                fontWeight: FontWeight.bold,
-                color: Colors.green,
-              ),
-            ),
-          ],
-        ),
-        Column(
-          crossAxisAlignment: CrossAxisAlignment.end,
-          children: [
-            const Text(
-              'Payables',
-              style: TextStyle(
-                fontSize: HomeConstants.bodyTextSize,
-                color: AppColors.textSecondary,
-              ),
-            ),
-            const SizedBox(height: HomeConstants.tinyPadding),
-            Text(
-              account.balanceData.unsecuredBalances.totalPayables,
-              style: const TextStyle(
-                fontSize: HomeConstants.subheadingTextSize,
-                fontWeight: FontWeight.bold,
-                color: Colors.red,
-              ),
-            ),
-          ],
-        ),
-      ],
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/widgets/account_qr_dialog.dart b/vimbisopay_app/lib/presentation/widgets/account_qr_dialog.dart
deleted file mode 100644
index a3b03cc..0000000
--- a/vimbisopay_app/lib/presentation/widgets/account_qr_dialog.dart
+++ /dev/null
@@ -1,108 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:qr_flutter/qr_flutter.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/domain/entities/dashboard.dart';
-
-class AccountQRDialog extends StatelessWidget {
-  final DashboardAccount account;
-
-  const AccountQRDialog({
-    Key? key,
-    required this.account,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Column(
-      mainAxisSize: MainAxisSize.min,
-      children: [
-        AppBar(
-          backgroundColor: Colors.transparent,
-          elevation: 0,
-          leading: IconButton(
-            icon: const Icon(Icons.close, color: AppColors.textSecondary),
-            onPressed: () => Navigator.pop(context),
-          ),
-        ),
-        Expanded(
-          child: SingleChildScrollView(
-            child: Padding(
-              padding: const EdgeInsets.all(24.0),
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.center,
-                children: [
-                  Text(
-                    account.accountName,
-                    style: const TextStyle(
-                      fontSize: 24,
-                      fontWeight: FontWeight.bold,
-                      color: AppColors.textPrimary,
-                    ),
-                    textAlign: TextAlign.center,
-                  ),
-                  const SizedBox(height: 8),
-                  Row(
-                    mainAxisAlignment: MainAxisAlignment.center,
-                    children: [
-                      const Text(
-                        '@',
-                        style: TextStyle(
-                          color: AppColors.primary,
-                          fontWeight: FontWeight.bold,
-                        ),
-                      ),
-                      Text(
-                        account.accountHandle,
-                        style: const TextStyle(
-                          color: AppColors.textSecondary,
-                        ),
-                      ),
-                    ],
-                  ),
-                  const SizedBox(height: 32),
-                  Container(
-                    padding: const EdgeInsets.all(16),
-                    decoration: BoxDecoration(
-                      color: Colors.white,
-                      borderRadius: BorderRadius.circular(12),
-                      boxShadow: [
-                        BoxShadow(
-                          color: Colors.black.withOpacity(0.1),
-                          blurRadius: 8,
-                          offset: const Offset(0, 2),
-                        ),
-                      ],
-                    ),
-                    child: QrImageView(
-                      data: account.accountID,
-                      version: QrVersions.auto,
-                      size: 200,
-                      backgroundColor: Colors.white,
-                    ),
-                  ),
-                  const SizedBox(height: 24),
-                  const Text(
-                    'Scan to receive payment',
-                    style: TextStyle(
-                      fontSize: 16,
-                      color: AppColors.textSecondary,
-                    ),
-                  ),
-                  const SizedBox(height: 8),
-                  Text(
-                    'Account ID: ${account.accountID}',
-                    style: const TextStyle(
-                      fontSize: 14,
-                      color: AppColors.textSecondary,
-                    ),
-                  ),
-                  const SizedBox(height: 24),
-                ],
-              ),
-            ),
-          ),
-        ),
-      ],
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/widgets/account_selection_bottom_sheet.dart b/vimbisopay_app/lib/presentation/widgets/account_selection_bottom_sheet.dart
deleted file mode 100644
index 9c66c9b..0000000
--- a/vimbisopay_app/lib/presentation/widgets/account_selection_bottom_sheet.dart
+++ /dev/null
@@ -1,105 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/domain/entities/dashboard.dart';
-import 'package:vimbisopay_app/presentation/widgets/account_qr_dialog.dart';
-
-class AccountSelectionBottomSheet extends StatelessWidget {
-  final List<DashboardAccount> accounts;
-
-  const AccountSelectionBottomSheet({
-    Key? key,
-    required this.accounts,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      padding: const EdgeInsets.all(16),
-      decoration: const BoxDecoration(
-        color: AppColors.surface,
-        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
-      ),
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          Row(
-            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-            children: [
-              const Text(
-                'Select Account',
-                style: TextStyle(
-                  fontSize: 20,
-                  fontWeight: FontWeight.bold,
-                  color: AppColors.textPrimary,
-                ),
-              ),
-              IconButton(
-                icon: const Icon(Icons.close),
-                onPressed: () => Navigator.pop(context),
-                color: AppColors.textSecondary,
-              ),
-            ],
-          ),
-          const SizedBox(height: 16),
-          ListView.builder(
-            shrinkWrap: true,
-            physics: const NeverScrollableScrollPhysics(),
-            itemCount: accounts.length,
-            itemBuilder: (context, index) {
-              final account = accounts[index];
-              return ListTile(
-                title: Text(
-                  account.accountName,
-                  style: const TextStyle(
-                    fontSize: 16,
-                    color: AppColors.textPrimary,
-                    fontWeight: FontWeight.w500,
-                  ),
-                ),
-                subtitle: Row(
-                  children: [
-                    const Text(
-                      '@',
-                      style: TextStyle(
-                        color: AppColors.primary,
-                        fontWeight: FontWeight.bold,
-                      ),
-                    ),
-                    Text(
-                      account.accountHandle,
-                      style: const TextStyle(
-                        color: AppColors.textSecondary,
-                      ),
-                    ),
-                  ],
-                ),
-                trailing: const Icon(
-                  Icons.arrow_forward_ios,
-                  size: 16,
-                  color: AppColors.textSecondary,
-                ),
-                onTap: () {
-                  Navigator.pop(context);
-                  showModalBottomSheet(
-                    context: context,
-                    isScrollControlled: true,
-                    backgroundColor: Colors.transparent,
-                    builder: (context) => Container(
-                      height: MediaQuery.of(context).size.height * 0.9,
-                      decoration: const BoxDecoration(
-                        color: AppColors.surface,
-                        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
-                      ),
-                      child: AccountQRDialog(account: account),
-                    ),
-                  );
-                },
-              );
-            },
-          ),
-        ],
-      ),
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/widgets/empty_state.dart b/vimbisopay_app/lib/presentation/widgets/empty_state.dart
deleted file mode 100644
index ea997db..0000000
--- a/vimbisopay_app/lib/presentation/widgets/empty_state.dart
+++ /dev/null
@@ -1,60 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-
-class EmptyState extends StatelessWidget {
-  final IconData icon;
-  final String message;
-  final VoidCallback? onRetry;
-
-  const EmptyState({
-    super.key,
-    required this.icon,
-    required this.message,
-    this.onRetry,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Center(
-      child: Padding(
-        padding: const EdgeInsets.all(24.0),
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            Icon(
-              icon,
-              size: 64,
-              color: AppColors.textSecondary,
-            ),
-            const SizedBox(height: 16),
-            Text(
-              message,
-              textAlign: TextAlign.center,
-              style: const TextStyle(
-                color: AppColors.textSecondary,
-                fontSize: 16,
-                height: 1.4,
-              ),
-            ),
-            if (onRetry != null) ...[
-              const SizedBox(height: 24),
-              FilledButton.icon(
-                onPressed: onRetry,
-                icon: const Icon(Icons.refresh),
-                label: const Text('Try Again'),
-                style: FilledButton.styleFrom(
-                  backgroundColor: AppColors.primary,
-                  foregroundColor: AppColors.textPrimary,
-                  padding: const EdgeInsets.symmetric(
-                    horizontal: 24,
-                    vertical: 12,
-                  ),
-                ),
-              ),
-            ],
-          ],
-        ),
-      ),
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/widgets/home_action_buttons.dart b/vimbisopay_app/lib/presentation/widgets/home_action_buttons.dart
deleted file mode 100644
index fd68565..0000000
--- a/vimbisopay_app/lib/presentation/widgets/home_action_buttons.dart
+++ /dev/null
@@ -1,143 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/domain/entities/dashboard.dart';
-import 'package:vimbisopay_app/presentation/constants/home_constants.dart';
-import 'package:vimbisopay_app/presentation/widgets/account_qr_dialog.dart';
-import 'package:vimbisopay_app/presentation/widgets/account_selection_bottom_sheet.dart';
-
-class HomeActionButtons extends StatelessWidget {
-  final List<DashboardAccount>? accounts;
-  final VoidCallback? onSendTap;
-
-  const HomeActionButtons({
-    super.key,
-    this.accounts,
-    this.onSendTap,
-  });
-
-  void _handleReceiveTap(BuildContext context) {
-    if (accounts == null || accounts!.isEmpty) return;
-
-    if (accounts!.length == 1) {
-      _showQRDialog(context, accounts!.first);
-    } else {
-      _showAccountSelection(context);
-    }
-  }
-
-  void _showQRDialog(BuildContext context, DashboardAccount account) {
-    showModalBottomSheet(
-      context: context,
-      isScrollControlled: true,
-      backgroundColor: Colors.transparent,
-      builder: (context) => Container(
-        height: MediaQuery.of(context).size.height * 0.9,
-        decoration: const BoxDecoration(
-          color: AppColors.surface,
-          borderRadius: BorderRadius.vertical(
-            top: Radius.circular(HomeConstants.cardBorderRadius),
-          ),
-        ),
-        child: AccountQRDialog(account: account),
-      ),
-    );
-  }
-
-  void _showAccountSelection(BuildContext context) {
-    showModalBottomSheet(
-      context: context,
-      backgroundColor: Colors.transparent,
-      isScrollControlled: true,
-      builder: (context) => AccountSelectionBottomSheet(
-        accounts: accounts!,
-      ),
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      padding: const EdgeInsets.symmetric(
-        vertical: HomeConstants.defaultPadding - 4,
-      ),
-      decoration: BoxDecoration(
-        color: AppColors.surface,
-        boxShadow: [
-          BoxShadow(
-            color: Colors.black.withOpacity(0.1),
-            blurRadius: 8,
-            offset: const Offset(0, -4),
-          ),
-        ],
-      ),
-      child: Row(
-        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
-        children: [
-          _ActionButton(
-            icon: Icons.payments_outlined,
-            label: 'Send',
-            onTap: onSendTap,
-          ),
-          _ActionButton(
-            icon: Icons.account_balance_wallet_outlined,
-            label: 'Receive',
-            onTap: () => _handleReceiveTap(context),
-          ),
-        ],
-      ),
-    );
-  }
-}
-
-class _ActionButton extends StatelessWidget {
-  final IconData icon;
-  final String label;
-  final VoidCallback? onTap;
-
-  const _ActionButton({
-    required this.icon,
-    required this.label,
-    this.onTap,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Column(
-      mainAxisSize: MainAxisSize.min,
-      children: [
-        GestureDetector(
-          onTap: onTap,
-          child: Container(
-            width: HomeConstants.actionButtonSize,
-            height: HomeConstants.actionButtonSize,
-            decoration: BoxDecoration(
-              shape: BoxShape.circle,
-              color: AppColors.primary,
-              boxShadow: [
-                BoxShadow(
-                  color: Colors.black.withOpacity(0.2),
-                  blurRadius: 8,
-                  offset: const Offset(0, 4),
-                ),
-              ],
-            ),
-            child: Icon(
-              icon,
-              size: HomeConstants.actionButtonIconSize,
-              color: Colors.white,
-            ),
-          ),
-        ),
-        const SizedBox(height: HomeConstants.tinyPadding),
-        Text(
-          label,
-          style: const TextStyle(
-            color: AppColors.textPrimary,
-            fontSize: HomeConstants.actionButtonTextSize,
-            fontWeight: FontWeight.w500,
-          ),
-        ),
-      ],
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/widgets/page_indicator.dart b/vimbisopay_app/lib/presentation/widgets/page_indicator.dart
deleted file mode 100644
index dc77b6a..0000000
--- a/vimbisopay_app/lib/presentation/widgets/page_indicator.dart
+++ /dev/null
@@ -1,37 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/presentation/constants/home_constants.dart';
-
-class PageIndicator extends StatelessWidget {
-  final int count;
-  final int currentPage;
-
-  const PageIndicator({
-    super.key,
-    required this.count,
-    required this.currentPage,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Row(
-      mainAxisAlignment: MainAxisAlignment.center,
-      children: List.generate(
-        count,
-        (index) => Container(
-          margin: const EdgeInsets.symmetric(
-            horizontal: HomeConstants.tinyPadding,
-          ),
-          width: 8,
-          height: 8,
-          decoration: BoxDecoration(
-            shape: BoxShape.circle,
-            color: currentPage == index
-                ? AppColors.primary
-                : AppColors.primary.withOpacity(0.2),
-          ),
-        ),
-      ),
-    );
-  }
-}
diff --git a/vimbisopay_app/lib/presentation/widgets/transactions_list.dart b/vimbisopay_app/lib/presentation/widgets/transactions_list.dart
deleted file mode 100644
index 0aac5b7..0000000
--- a/vimbisopay_app/lib/presentation/widgets/transactions_list.dart
+++ /dev/null
@@ -1,190 +0,0 @@
-import 'package:flutter/material.dart';
-import 'package:flutter_bloc/flutter_bloc.dart';
-import 'package:intl/intl.dart';
-import 'package:vimbisopay_app/core/theme/app_colors.dart';
-import 'package:vimbisopay_app/domain/entities/ledger_entry.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_bloc.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_event.dart';
-import 'package:vimbisopay_app/presentation/blocs/home/home_state.dart';
-import 'package:vimbisopay_app/presentation/widgets/empty_state.dart';
-
-class TransactionsList extends StatelessWidget {
-  const TransactionsList({super.key});
-
-  IconData _getTransactionIcon(String type, double amount) {
-    switch (type.toLowerCase()) {
-      case 'transfer':
-        return amount >= 0 ? Icons.arrow_downward : Icons.arrow_upward;
-      case 'payment':
-        return amount >= 0 ? Icons.payments : Icons.payment;
-      case 'deposit':
-        return Icons.account_balance_wallet;
-      case 'withdrawal':
-        return Icons.money_off;
-      default:
-        return Icons.swap_horiz;
-    }
-  }
-
-  String _getTransactionSemanticLabel(LedgerEntry transaction) {
-    final dateFormat = DateFormat('MMMM d, yyyy h:mm a');
-    final formattedDate = dateFormat.format(transaction.timestamp);
-    final transactionType = transaction.amount >= 0 ? 'Received' : 'Sent';
-
-    return '$transactionType ${transaction.formattedAmount} on $formattedDate. '
-        'Transaction with ${transaction.counterpartyAccountName}. '
-        'Description: ${transaction.description}';
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return BlocBuilder<HomeBloc, HomeState>(
-      builder: (context, state) {
-        if (state.status == HomeStatus.initial ||
-            (state.status == HomeStatus.loading &&
-                state.combinedLedgerEntries.isEmpty)) {
-          return const Padding(
-            padding: EdgeInsets.all(24.0),
-            child: Center(
-              child: CircularProgressIndicator(
-                valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
-              ),
-            ),
-          );
-        }
-
-        if (state.error != null) {
-          return EmptyState(
-            icon: Icons.cloud_off_rounded,
-            message: state.error!,
-            onRetry: () {
-              context.read<HomeBloc>().add(const HomeLedgerLoaded(
-                    accountLedgers: {},
-                    combinedEntries: [],
-                    hasMore: true,
-                  ));
-            },
-          );
-        }
-
-        if (state.combinedLedgerEntries.isEmpty) {
-          return const Padding(
-            padding:
-                EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),
-            child: Column(
-              mainAxisAlignment: MainAxisAlignment.center,
-              children: [
-                Icon(
-                  Icons.receipt_long,
-                  size: 64,
-                  color: AppColors.textSecondary,
-                ),
-                SizedBox(height: 16),
-                Text(
-                  'No Transactions Yet',
-                  textAlign: TextAlign.center,
-                  style: TextStyle(
-                    color: AppColors.textPrimary,
-                    fontSize: 20,
-                    fontWeight: FontWeight.w600,
-                  ),
-                ),
-                SizedBox(height: 8),
-                Text(
-                  'Your transaction history will appear here once you start sending or receiving payments.',
-                  textAlign: TextAlign.center,
-                  style: TextStyle(
-                    color: AppColors.textSecondary,
-                    fontSize: 16,
-                    height: 1.4,
-                  ),
-                ),
-                SizedBox(height: 24),
-              ],
-            ),
-          );
-        }
-
-        return Column(
-          children: [
-            ListView.builder(
-              shrinkWrap: true,
-              physics: const NeverScrollableScrollPhysics(),
-              itemCount: state.combinedLedgerEntries.length,
-              itemBuilder: (context, index) {
-                final transaction = state.combinedLedgerEntries[index];
-                final dateFormat = DateFormat('MMM d, yyyy h:mm a');
-                final formattedDate = dateFormat.format(transaction.timestamp);
-
-                return Semantics(
-                  label: _getTransactionSemanticLabel(transaction),
-                  child: ListTile(
-                    leading: Icon(
-                      _getTransactionIcon(transaction.type, transaction.amount),
-                      color: transaction.amount >= 0
-                          ? AppColors.success
-                          : AppColors.error,
-                      size: 28,
-                    ),
-                    title: Text(
-                      transaction.description,
-                      style: const TextStyle(
-                        fontWeight: FontWeight.w500,
-                      ),
-                    ),
-                    subtitle: Column(
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        Text(
-                          transaction.counterpartyAccountName,
-                          style: TextStyle(
-                            color: AppColors.primary.withOpacity(0.8),
-                            fontSize: 13,
-                          ),
-                        ),
-                        const SizedBox(height: 2),
-                        Text(
-                          formattedDate,
-                          style: const TextStyle(
-                            fontSize: 12,
-                            color: Colors.grey,
-                          ),
-                        ),
-                      ],
-                    ),
-                    trailing: Text(
-                      transaction.formattedAmount,
-                      style: TextStyle(
-                        color: transaction.amount >= 0
-                            ? AppColors.success
-                            : AppColors.error,
-                        fontWeight: FontWeight.bold,
-                        fontSize: 16,
-                      ),
-                    ),
-                    isThreeLine: true,
-                    enabled: true,
-                    contentPadding: const EdgeInsets.symmetric(
-                      horizontal: 16,
-                      vertical: 8,
-                    ),
-                  ),
-                );
-              },
-            ),
-            if (state.status == HomeStatus.loadingMore)
-              const Padding(
-                padding: EdgeInsets.all(16.0),
-                child: Center(
-                  child: CircularProgressIndicator(
-                    valueColor:
-                        AlwaysStoppedAnimation<Color>(AppColors.primary),
-                  ),
-                ),
-              ),
-          ],
-        );
-      },
-    );
-  }
-}
diff --git a/vimbisopay_app/pubspec.lock b/vimbisopay_app/pubspec.lock
index acae1b0..0488c90 100644
--- a/vimbisopay_app/pubspec.lock
+++ b/vimbisopay_app/pubspec.lock
@@ -1,6 +1,14 @@
 # Generated by pub
 # See https://dart.dev/tools/pub/glossary#lockfile
 packages:
+  archive:
+    dependency: transitive
+    description:
+      name: archive
+      sha256: "08064924cbf0ab88280a0c3f60db9dd24fec693927e725ecb176f16c629d1cb8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.1"
   args:
     dependency: transitive
     description:
@@ -25,14 +33,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "2.11.0"
-  bloc:
-    dependency: transitive
-    description:
-      name: bloc
-      sha256: "106842ad6569f0b60297619e9e0b1885c2fb9bf84812935490e6c5275777804e"
-      url: "https://pub.dev"
-    source: hosted
-    version: "8.1.4"
   boolean_selector:
     dependency: transitive
     description:
@@ -49,6 +49,22 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.3.0"
+  checked_yaml:
+    dependency: transitive
+    description:
+      name: checked_yaml
+      sha256: feb6bed21949061731a7a75fc5d2aa727cf160b91af9a3e464c5e3a32e28b5ff
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.3"
+  cli_util:
+    dependency: transitive
+    description:
+      name: cli_util
+      sha256: ff6785f7e9e3c38ac98b2fb035701789de90154024a75b6cb926445e83197d1c
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.4.2"
   clock:
     dependency: transitive
     description:
@@ -113,14 +129,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "5.0.3"
-  equatable:
-    dependency: "direct main"
-    description:
-      name: equatable
-      sha256: "567c64b3cb4cf82397aac55f4f0cbd3ca20d77c6c03bedbc4ceaddc08904aef7"
-      url: "https://pub.dev"
-    source: hosted
-    version: "2.0.7"
   fake_async:
     dependency: transitive
     description:
@@ -150,22 +158,22 @@ packages:
     description: flutter
     source: sdk
     version: "0.0.0"
-  flutter_bloc:
-    dependency: "direct main"
+  flutter_launcher_icons:
+    dependency: "direct dev"
     description:
-      name: flutter_bloc
-      sha256: b594505eac31a0518bdcb4b5b79573b8d9117b193cc80cc12e17d639b10aa27a
+      name: flutter_launcher_icons
+      sha256: "31cd0885738e87c72d6f055564d37fabcdacee743b396b78c7636c169cac64f5"
       url: "https://pub.dev"
     source: hosted
-    version: "8.1.6"
+    version: "0.14.2"
   flutter_lints:
     dependency: "direct dev"
     description:
       name: flutter_lints
-      sha256: a25a15ebbdfc33ab1cd26c63a6ee519df92338a9c10f122adda92938253bef04
+      sha256: "5398f14efa795ffb7a33e9b6a08798b26a180edac4ad7db3f231e40f82ce11e1"
       url: "https://pub.dev"
     source: hosted
-    version: "2.0.3"
+    version: "5.0.0"
   flutter_plugin_android_lifecycle:
     dependency: transitive
     description:
@@ -178,10 +186,10 @@ packages:
     dependency: "direct main"
     description:
       name: flutter_secure_storage
-      sha256: "22dbf16f23a4bcf9d35e51be1c84ad5bb6f627750565edd70dab70f3ff5fff8f"
+      sha256: "165164745e6afb5c0e3e3fcc72a012fb9e58496fb26ffb92cf22e16a821e85d0"
       url: "https://pub.dev"
     source: hosted
-    version: "8.1.0"
+    version: "9.2.2"
   flutter_secure_storage_linux:
     dependency: transitive
     description:
@@ -218,10 +226,10 @@ packages:
     dependency: transitive
     description:
       name: flutter_secure_storage_windows
-      sha256: "38f9501c7cb6f38961ef0e1eacacee2b2d4715c63cc83fe56449c4d3d0b47255"
+      sha256: b20b07cb5ed4ed74fc567b78a72936203f587eba460af1df11281c9326cd3709
       url: "https://pub.dev"
     source: hosted
-    version: "2.1.1"
+    version: "3.1.2"
   flutter_test:
     dependency: "direct dev"
     description: flutter
@@ -248,14 +256,22 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "4.1.1"
+  image:
+    dependency: transitive
+    description:
+      name: image
+      sha256: "20842a5ad1555be624c314b0c0cc0566e8ece412f61e859a42efeb6d4101a26c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.5.0"
   intl:
-    dependency: "direct main"
+    dependency: transitive
     description:
       name: intl
-      sha256: "3bc132a9dbce73a7e4a21a17d06e1878839ffbf975568bc875c60537824b0c4d"
+      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
       url: "https://pub.dev"
     source: hosted
-    version: "0.18.1"
+    version: "0.19.0"
   js:
     dependency: transitive
     description:
@@ -264,6 +280,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "0.6.7"
+  json_annotation:
+    dependency: transitive
+    description:
+      name: json_annotation
+      sha256: "1ce844379ca14835a50d2f019a3099f419082cfdd231cd86a142af94dd5c6bb1"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.9.0"
   leak_tracker:
     dependency: transitive
     description:
@@ -292,10 +316,10 @@ packages:
     dependency: transitive
     description:
       name: lints
-      sha256: "0a217c6c989d21039f1498c3ed9f3ed71b354e69873f13a8dfc3c9fe76f1b452"
+      sha256: "4a16b3f03741e1252fda5de3ce712666d010ba2122f8e912c94f9f7b90e1a4c3"
       url: "https://pub.dev"
     source: hosted
-    version: "2.1.1"
+    version: "5.1.0"
   local_auth:
     dependency: "direct main"
     description:
@@ -360,14 +384,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.15.0"
-  nested:
-    dependency: transitive
-    description:
-      name: nested
-      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
-      url: "https://pub.dev"
-    source: hosted
-    version: "1.0.0"
   path:
     dependency: "direct main"
     description:
@@ -376,6 +392,30 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.9.0"
+  path_provider:
+    dependency: transitive
+    description:
+      name: path_provider
+      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.5"
+  path_provider_android:
+    dependency: transitive
+    description:
+      name: path_provider_android
+      sha256: "4adf4fd5423ec60a29506c76581bc05854c55e3a0b72d35bb28d661c9686edf2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.15"
+  path_provider_foundation:
+    dependency: transitive
+    description:
+      name: path_provider_foundation
+      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.1"
   path_provider_linux:
     dependency: transitive
     description:
@@ -400,6 +440,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "2.3.0"
+  petitparser:
+    dependency: transitive
+    description:
+      name: petitparser
+      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.2"
   pin_code_fields:
     dependency: "direct main"
     description:
@@ -432,30 +480,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "3.9.1"
-  provider:
+  posix:
     dependency: transitive
     description:
-      name: provider
-      sha256: c8a055ee5ce3fd98d6fc872478b03823ffdb448699c6ebdbbc71d59b596fd48c
+      name: posix
+      sha256: a0117dc2167805aa9125b82eee515cc891819bac2f538c83646d355b16f58b9a
       url: "https://pub.dev"
     source: hosted
-    version: "6.1.2"
-  qr:
-    dependency: transitive
-    description:
-      name: qr
-      sha256: "5a1d2586170e172b8a8c8470bbbffd5eb0cd38a66c0d77155ea138d3af3a4445"
-      url: "https://pub.dev"
-    source: hosted
-    version: "3.0.2"
-  qr_flutter:
-    dependency: "direct main"
-    description:
-      name: qr_flutter
-      sha256: "5095f0fc6e3f71d08adef8feccc8cea4f12eec18a2e31c2e8d82cb6019f4b097"
-      url: "https://pub.dev"
-    source: hosted
-    version: "4.1.0"
+    version: "6.0.1"
   shared_preferences:
     dependency: "direct main"
     description:
@@ -725,6 +757,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.1.0"
+  win32:
+    dependency: transitive
+    description:
+      name: win32
+      sha256: "8b338d4486ab3fbc0ba0db9f9b4f5239b6697fcee427939a40e720cbb9ee0a69"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.9.0"
   xdg_directories:
     dependency: transitive
     description:
@@ -733,6 +773,22 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.1.0"
+  xml:
+    dependency: transitive
+    description:
+      name: xml
+      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.5.0"
+  yaml:
+    dependency: transitive
+    description:
+      name: yaml
+      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.2"
 sdks:
-  dart: ">=3.5.0 <4.0.0"
+  dart: ">=3.6.0 <4.0.0"
   flutter: ">=3.24.0"
diff --git a/vimbisopay_app/pubspec.yaml b/vimbisopay_app/pubspec.yaml
index c878c48..0ad91bc 100644
--- a/vimbisopay_app/pubspec.yaml
+++ b/vimbisopay_app/pubspec.yaml
@@ -1,39 +1,44 @@
 name: vimbisopay_app
-description: A new Flutter project.
+description: "A new Flutter project."
 publish_to: 'none'
+
 version: 1.0.0+1
 
 environment:
-  sdk: '>=3.0.0 <4.0.0'
+  sdk: ^3.6.0
 
 dependencies:
   flutter:
     sdk: flutter
-  cupertino_icons: ^1.0.2
-  intl: ^0.18.0
-  qr_flutter: ^4.1.0
-  http: ^1.1.0
+  cupertino_icons: ^1.0.8
   dartz: ^0.10.1
-  shared_preferences: ^2.2.0
-  flutter_secure_storage: ^8.0.0
-  local_auth: ^2.1.6
+  smooth_page_indicator: ^1.1.0
+  shared_preferences: ^2.3.3
+  url_launcher: ^6.2.5
+  http: ^1.2.2
+  local_auth: ^2.1.7
+  flutter_secure_storage: ^9.0.0
   pin_code_fields: ^8.0.1
-  country_picker: ^2.0.20
-  url_launcher: ^6.1.12
-  sqflite: ^2.3.0
-  encrypt: ^5.0.1
+  country_picker: ^2.0.25
+  sqflite: ^2.3.2
+  path: ^1.8.3
+  encrypt: ^5.0.3
   crypto: ^3.0.3
-  smooth_page_indicator: ^1.1.0
-  equatable: ^2.0.5
-  flutter_bloc: ^8.1.3
 
-  path: any
 dev_dependencies:
   flutter_test:
     sdk: flutter
-  flutter_lints: ^2.0.0
+  flutter_lints: ^5.0.0
+  flutter_launcher_icons: "^0.14.2"
+
+flutter_launcher_icons:
+  android: "launcher_icon"
+  ios: true
+  image_path: "assets/images/app-log.jpeg"
+  min_sdk_android: 21
 
 flutter:
   uses-material-design: true
+  
   assets:
     - lib/assets/images/
