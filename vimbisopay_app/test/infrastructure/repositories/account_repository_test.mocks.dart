// Mocks generated by Mockito 5.4.5 from annotations
// in vimbisopay_app/test/infrastructure/repositories/account_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i7;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sqflite/sqflite.dart' as _i3;
import 'package:vimbisopay_app/domain/entities/credex_response.dart' as _i11;
import 'package:vimbisopay_app/domain/entities/dashboard.dart' as _i10;
import 'package:vimbisopay_app/domain/entities/user.dart' as _i9;
import 'package:vimbisopay_app/infrastructure/database/database_helper.dart'
    as _i8;
import 'package:vimbisopay_app/infrastructure/services/password_service.dart'
    as _i13;
import 'package:vimbisopay_app/infrastructure/services/security_service.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
          )
          as _i4.Future<_i7.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i4.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i8.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i3.Database>.value(
              _FakeDatabase_2(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i3.Database>);

  @override
  _i4.Future<void> saveUser(_i9.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i9.User?> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue: _i4.Future<_i9.User?>.value(),
          )
          as _i4.Future<_i9.User?>);

  @override
  _i4.Future<bool> hasUser() =>
      (super.noSuchMethod(
            Invocation.method(#hasUser, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> clearAllTables() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllTables, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser() =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAccountPendingTransactions(
    String? accountId,
    List<_i10.PendingOffer>? pendingIn,
    List<_i10.PendingOffer>? pendingOut,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAccountPendingTransactions, [
              accountId,
              pendingIn,
              pendingOut,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updatePendingTransactions(_i11.CredexResponse? response) =>
      (super.noSuchMethod(
            Invocation.method(#updatePendingTransactions, [response]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<(List<_i10.PendingOffer>, List<_i10.PendingOffer>)>
  getAllPendingTransactions() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPendingTransactions, []),
            returnValue: _i4.Future<
              (List<_i10.PendingOffer>, List<_i10.PendingOffer>)
            >.value((<_i10.PendingOffer>[], <_i10.PendingOffer>[])),
          )
          as _i4.Future<(List<_i10.PendingOffer>, List<_i10.PendingOffer>)>);
}

/// A class which mocks [SecurityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecurityService extends _i1.Mock implements _i12.SecurityService {
  MockSecurityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getSecurePin() =>
      (super.noSuchMethod(
            Invocation.method(#getSecurePin, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<bool> isBiometricAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricAvailable, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<(bool, String?)> authenticateWithBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#authenticateWithBiometrics, []),
            returnValue: _i4.Future<(bool, String?)>.value((false, null)),
          )
          as _i4.Future<(bool, String?)>);

  @override
  _i4.Future<void> setPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#setPin, [pin]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setBiometricEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#setBiometricEnabled, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> verifyPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPin, [pin]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> usesBiometric() =>
      (super.noSuchMethod(
            Invocation.method(#usesBiometric, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> isSecuritySetup() =>
      (super.noSuchMethod(
            Invocation.method(#isSecuritySetup, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> requiresAuthentication() =>
      (super.noSuchMethod(
            Invocation.method(#requiresAuthentication, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [PasswordService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPasswordService extends _i1.Mock implements _i13.PasswordService {
  MockPasswordService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<({String hash, String salt})> hashPassword(String? password) =>
      (super.noSuchMethod(
            Invocation.method(#hashPassword, [password]),
            returnValue: _i4.Future<({String hash, String salt})>.value((
              hash: _i6.dummyValue<String>(
                this,
                Invocation.method(#hashPassword, [password]),
              ),
              salt: _i6.dummyValue<String>(
                this,
                Invocation.method(#hashPassword, [password]),
              ),
            )),
          )
          as _i4.Future<({String hash, String salt})>);

  @override
  _i4.Future<bool> verifyPassword(
    String? password,
    String? hash,
    String? salt,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPassword, [password, hash, salt]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
