// Mocks generated by Mockito 5.4.5 from annotations
// in vimbisopay_app/test/presentation/blocs/home/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;
import 'package:vimbisopay_app/application/usecases/accept_credex_bulk.dart'
    as _i11;
import 'package:vimbisopay_app/core/error/failures.dart' as _i6;
import 'package:vimbisopay_app/domain/entities/account.dart' as _i8;
import 'package:vimbisopay_app/domain/entities/credex_request.dart' as _i10;
import 'package:vimbisopay_app/domain/entities/credex_response.dart' as _i9;
import 'package:vimbisopay_app/domain/entities/dashboard.dart' as _i13;
import 'package:vimbisopay_app/domain/entities/user.dart' as _i7;
import 'package:vimbisopay_app/domain/repositories/account_repository.dart'
    as _i3;
import 'package:vimbisopay_app/infrastructure/database/database_helper.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccountRepository_1 extends _i1.SmartFake
    implements _i3.AccountRepository {
  _FakeAccountRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i4.Database {
  _FakeDatabase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i3.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User>> login({
    required String? phone,
    String? password,
    String? passwordHash,
    String? passwordSalt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #phone: phone,
              #password: password,
              #passwordHash: passwordHash,
              #passwordSalt: passwordSalt,
            }),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.User>>.value(
              _FakeEither_0<_i6.Failure, _i7.User>(
                this,
                Invocation.method(#login, [], {
                  #phone: phone,
                  #password: password,
                  #passwordHash: passwordHash,
                  #passwordSalt: passwordSalt,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> onboardMember({
    required String? firstName,
    required String? lastName,
    required String? phone,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#onboardMember, [], {
              #firstName: firstName,
              #lastName: lastName,
              #phone: phone,
              #password: password,
            }),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#onboardMember, [], {
                  #firstName: firstName,
                  #lastName: lastName,
                  #phone: phone,
                  #password: password,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User?>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.User?>>.value(
              _FakeEither_0<_i6.Failure, _i7.User?>(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User?>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> saveUser(_i7.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#saveUser, [user]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, Map<String, double>>> getBalances() =>
      (super.noSuchMethod(
            Invocation.method(#getBalances, []),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, Map<String, double>>>.value(
                  _FakeEither_0<_i6.Failure, Map<String, double>>(
                    this,
                    Invocation.method(#getBalances, []),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, Map<String, double>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, Map<String, dynamic>>> getLedger({
    required String? accountId,
    int? startRow,
    int? numRows,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getLedger, [], {
              #accountId: accountId,
              #startRow: startRow,
              #numRows: numRows,
            }),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, Map<String, dynamic>>>.value(
                  _FakeEither_0<_i6.Failure, Map<String, dynamic>>(
                    this,
                    Invocation.method(#getLedger, [], {
                      #accountId: accountId,
                      #startRow: startRow,
                      #numRows: numRows,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, Map<String, dynamic>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i8.Account>> getAccountByHandle(
    String? handle,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAccountByHandle, [handle]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, _i8.Account>>.value(
              _FakeEither_0<_i6.Failure, _i8.Account>(
                this,
                Invocation.method(#getAccountByHandle, [handle]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i8.Account>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.CredexResponse>> createCredex(
    _i10.CredexRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createCredex, [request]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i9.CredexResponse>>.value(
                  _FakeEither_0<_i6.Failure, _i9.CredexResponse>(
                    this,
                    Invocation.method(#createCredex, [request]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i9.CredexResponse>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> acceptCredexBulk(
    List<String>? credexIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#acceptCredexBulk, [credexIds]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#acceptCredexBulk, [credexIds]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> cancelCredex(String? credexId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelCredex, [credexId]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#cancelCredex, [credexId]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> registerNotificationToken(
    String? token,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#registerNotificationToken, [token]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#registerNotificationToken, [token]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [AcceptCredexBulk].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptCredexBulk extends _i1.Mock implements _i11.AcceptCredexBulk {
  MockAcceptCredexBulk() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AccountRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAccountRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.AccountRepository);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> call(List<String>? credexIds) =>
      (super.noSuchMethod(
            Invocation.method(#call, [credexIds]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [credexIds]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i12.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i4.Database>.value(
              _FakeDatabase_2(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i4.Database>);

  @override
  _i5.Future<void> saveUser(_i7.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i7.User?> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue: _i5.Future<_i7.User?>.value(),
          )
          as _i5.Future<_i7.User?>);

  @override
  _i5.Future<bool> hasUser() =>
      (super.noSuchMethod(
            Invocation.method(#hasUser, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> clearAllTables() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllTables, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteUser() =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateAccountPendingTransactions(
    String? accountId,
    List<_i13.PendingOffer>? pendingIn,
    List<_i13.PendingOffer>? pendingOut,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAccountPendingTransactions, [
              accountId,
              pendingIn,
              pendingOut,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updatePendingTransactions(_i9.CredexResponse? response) =>
      (super.noSuchMethod(
            Invocation.method(#updatePendingTransactions, [response]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<(List<_i13.PendingOffer>, List<_i13.PendingOffer>)>
  getAllPendingTransactions() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPendingTransactions, []),
            returnValue: _i5.Future<
              (List<_i13.PendingOffer>, List<_i13.PendingOffer>)
            >.value((<_i13.PendingOffer>[], <_i13.PendingOffer>[])),
          )
          as _i5.Future<(List<_i13.PendingOffer>, List<_i13.PendingOffer>)>);
}
